services:
  # PostgreSQL Database - Local development database
  # Following Docker Compose best practices for database configuration
  db:
    image: postgres:15-alpine
    container_name: codecave-db
    environment:
      POSTGRES_DB: codecave_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Meilisearch - Search engine for full-text search
  # Enhanced with production-ready health checks
  search:
    image: getmeili/meilisearch:v1.10
    container_name: codecave-search
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-development_key_for_local_only}
      MEILI_ENV: development
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    depends_on:
      - db

  # RabbitMQ - Message queue for background jobs
  # Enhanced with proper dependency management
  mq:
    image: rabbitmq:3-management-alpine
    container_name: codecave-mq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Kong API Gateway - Routes and manages API requests
  # Following Context7 patterns for service dependencies
  kong-database:
    image: postgres:15-alpine
    container_name: codecave-kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  kong-migrations:
    image: kong:3.7-alpine
    container_name: codecave-kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    command: kong migrations bootstrap
    restart: "no"
    depends_on:
      kong-database:
        condition: service_healthy

  gateway:
    image: kong:3.7-alpine
    container_name: codecave-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000" # Proxy port
      - "8001:8001" # Admin API
      - "8002:8002" # Admin GUI
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # NestJS API - Your backend application
  # Enhanced with proper service dependencies following Context7 patterns
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile.dev
    container_name: codecave-api
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:postgres@db:5432/codecave_dev
      MEILI_HOST: http://search:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-development_key_for_local_only}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASS:-admin}@mq:5672
    ports:
      - "3001:3001"
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
      search:
        condition: service_healthy
      mq:
        condition: service_healthy
      redis:
        condition: service_healthy
      gateway:
        condition: service_healthy
    command: npm run dev
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Redis - For caching and sessions
  # Enhanced with proper health checks and dependency management
  redis:
    image: redis:7-alpine
    container_name: codecave-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
  meilisearch_data:
  rabbitmq_data:
  kong_data:
  redis_data:

networks:
  default:
    name: codecave-network
