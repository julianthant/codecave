name: Terraform Infrastructure

on:
  # Enhanced triggers with better path filtering
  workflow_dispatch: # Manual trigger
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
  pull_request:
    branches: [main]
    paths:
      - "infra/terraform/**"
      - ".github/workflows/terraform.yml"
  push:
    branches: [main]
    paths:
      - "infra/terraform/**"
  schedule:
    # Daily drift detection at 6 AM UTC
    - cron: "0 6 * * *"

env:
  TF_VERSION: "1.5.0"
  TERRAFORM_DIR: "./infra/terraform"
  TF_IN_AUTOMATION: "true"

jobs:
  # Infrastructure validation and security scanning
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./infra/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Format Check
        run: |
          echo "üîç Checking Terraform formatting..."
          if ! terraform fmt -check -diff; then
            echo "‚ùå Terraform files are not properly formatted"
            echo "üí° Run 'terraform fmt' to fix formatting issues"
            exit 1
          fi
          echo "‚úÖ Terraform formatting is correct"

      - name: Terraform Init
        run: |
          echo "üîÑ Initializing Terraform..."
          terraform init -no-color
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Validate
        run: |
          echo "üîç Validating Terraform configuration..."
          terraform validate -no-color
          echo "‚úÖ Terraform configuration is valid"

      - name: Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./infra/terraform
          quiet: true
          soft_fail: true
          framework: terraform
          output_format: sarif
          download_external_modules: true

  # Terraform planning and application
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'schedule' # Skip for drift detection

    defaults:
      run:
        working-directory: ./infra/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false # For better output parsing

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Init
        run: terraform init -no-color
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: |
          echo "üìã Creating Terraform plan..."
          terraform plan -no-color -out=tfplan
          echo "plan_output<<EOF" >> $GITHUB_OUTPUT
          terraform show -no-color tfplan >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_ssh_private_key_path: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_spaces_access_key: ${{ secrets.DO_SPACES_ACCESS_KEY }}
          TF_VAR_spaces_secret_key: ${{ secrets.DO_SPACES_SECRET_KEY }}

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### üèóÔ∏è Terraform Plan

            \`\`\`
            ${{ steps.plan.outputs.plan_output }}
            \`\`\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'apply')
        run: |
          echo "üöÄ Applying Terraform changes..."
          terraform apply -auto-approve tfplan
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_ssh_private_key_path: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_spaces_access_key: ${{ secrets.DO_SPACES_ACCESS_KEY }}
          TF_VAR_spaces_secret_key: ${{ secrets.DO_SPACES_SECRET_KEY }}

      - name: Output Infrastructure Info
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.action == 'apply')
        run: |
          echo "## üèóÔ∏è Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "**Server IP:** $(terraform output -raw droplet_ip)" >> $GITHUB_STEP_SUMMARY
          echo "**Database Host:** $(terraform output -raw database_host)" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:** Configure DNS to point api.codecave.tech to the server IP" >> $GITHUB_STEP_SUMMARY

  # Infrastructure drift detection
  drift-detection:
    name: Infrastructure Drift Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    defaults:
      run:
        working-directory: ./infra/terraform

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Terraform Init
        run: terraform init -no-color
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Check for Drift
        id: drift
        run: |
          echo "üîç Checking for infrastructure drift..."
          if terraform plan -detailed-exitcode -no-color; then
            echo "‚úÖ No infrastructure drift detected"
            echo "drift_detected=false" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Infrastructure drift detected!"
            echo "drift_detected=true" >> $GITHUB_OUTPUT
            terraform plan -no-color > drift_plan.txt
          fi
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_ssh_private_key_path: ${{ secrets.SSH_PRIVATE_KEY }}
          TF_VAR_spaces_access_key: ${{ secrets.DO_SPACES_ACCESS_KEY }}
          TF_VAR_spaces_secret_key: ${{ secrets.DO_SPACES_SECRET_KEY }}
        continue-on-error: true

      - name: Create Issue for Drift
        if: steps.drift.outputs.drift_detected == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const driftPlan = fs.readFileSync('./infra/terraform/drift_plan.txt', 'utf8');

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Infrastructure Drift Detected',
              body: `## Infrastructure Drift Detected
              
              Automated drift detection has found differences between the Terraform configuration and actual infrastructure state.
              
              ### Drift Details:
              \`\`\`
              ${driftPlan}
              \`\`\`
              
              ### Action Required:
              1. Review the drift details above
              2. Determine if changes were intentional
              3. Update Terraform configuration if needed
              4. Run \`terraform apply\` to resolve drift
              
              **Detected at:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}`,
              labels: ['infrastructure', 'drift', 'priority-high']
            });

            console.log('Created issue:', issue.data.html_url);
        run: terraform plan -no-color
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_ssh_private_key_path: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          TF_VAR_ssh_public_key_path: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_ssh_private_key_path: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Output Infrastructure Info
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "## üèóÔ∏è Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo "**Server IP:** $(terraform output -raw droplet_ip)" >> $GITHUB_STEP_SUMMARY
          echo "**Database Host:** $(terraform output -raw database_host)" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:** Configure DNS to point api.codecave.tech to the server IP" >> $GITHUB_STEP_SUMMARY
