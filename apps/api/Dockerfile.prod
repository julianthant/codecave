# Production-Optimized Multi-stage Dockerfile for NestJS API
# ========================================================
# Target: <400MB image size, <30s startup time, production security
# ========================================================

# Stage 1: Dependencies Stage (Cached layer optimization)
FROM node:22-alpine AS dependencies

# Install system dependencies and pnpm in single layer
RUN apk add --no-cache \
    curl \
    dumb-init \
    && npm install -g pnpm@8.15.0 \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Copy package files (layer cached unless dependencies change)
COPY package*.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/api/package*.json ./apps/api/

# Install dependencies with frozen lockfile for reproducible builds
RUN pnpm install --filter @codecave/api --frozen-lockfile

# ========================================================

# Stage 2: Build Stage
FROM dependencies AS builder

# Copy source code
COPY . .

# Generate Prisma client and build the application
RUN cd apps/api && \
    npx prisma generate --schema=./prisma/schema.prisma && \
    cd ../.. && \
    pnpm --filter @codecave/api build

# ========================================================

# Stage 3: Production Runtime Stage
FROM node:22-alpine AS production

# Create app user for security (non-root)
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Install runtime dependencies only
RUN apk add --no-cache \
    curl \
    dumb-init \
    && npm install -g pnpm@8.15.0 \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/*

WORKDIR /app

# Copy package files for production install
COPY --from=dependencies /app/package*.json ./
COPY --from=dependencies /app/pnpm-lock.yaml ./
COPY --from=dependencies /app/pnpm-workspace.yaml ./
COPY --from=dependencies /app/apps/api/package*.json ./apps/api/

# Install ONLY production dependencies (smaller image)
RUN pnpm install --filter @codecave/api --prod --frozen-lockfile && \
    pnpm store prune && \
    rm -rf ~/.pnpm-store && \
    rm -rf /tmp/* && \
    rm -rf /root/.cache

# Copy built application and generated files from builder stage
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/dist ./apps/api/dist
COPY --from=builder --chown=nestjs:nodejs /app/apps/api/generated ./apps/api/generated

# Set proper permissions and switch to non-root user
RUN chown -R nestjs:nodejs /app
USER nestjs

# Set production environment variables
ENV NODE_ENV=production
ENV PORT=3001

# Expose the port
EXPOSE 3001

# Enhanced health check with multiple endpoints
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3001/health/ready || exit 1

# Use dumb-init for proper signal handling in containers
ENTRYPOINT ["dumb-init", "--"]

# Start the production server
CMD ["pnpm", "--filter", "@codecave/api", "start:prod"] 