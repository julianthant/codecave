# Multi-stage production Dockerfile for NestJS API
# ===================================================

# Stage 1: Build Stage
# This stage includes all dependencies (dev + prod) needed for building
FROM node:22-alpine AS builder

# Set working directory
WORKDIR /app

# Install pnpm globally with specific version for consistency
RUN npm install -g pnpm@8.15.0

# Copy package files for dependency resolution
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./

# Copy package.json files for all workspace packages
COPY apps/api/package*.json ./apps/api/
COPY apps/web/package*.json ./apps/web/

# Install ALL dependencies (including dev dependencies needed for build)
RUN pnpm install --filter @codecave/api --no-frozen-lockfile

# Copy source code
COPY . .

# Generate Prisma client before building
RUN cd apps/api && npx prisma generate --schema=./prisma/schema.prisma

# Build the API (this needs @nestjs/cli and other dev dependencies)
RUN pnpm --filter @codecave/api build

# ===================================================

# Stage 2: Production Stage with Doppler Integration
# This stage only includes production dependencies and built files
FROM node:22-alpine AS production

# Set working directory
WORKDIR /app

# Install system dependencies and Doppler CLI
RUN apk add --no-cache curl && \
    # Install Doppler CLI
    curl -Ls https://cli.doppler.com/install.sh | sh && \
    # Install pnpm globally
    npm install -g pnpm@8.15.0

# Copy package files for dependency resolution
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./

# Copy package.json files for all workspace packages
COPY apps/api/package*.json ./apps/api/
COPY apps/web/package*.json ./apps/web/

# Install ONLY production dependencies (smaller image, faster startup)
RUN pnpm install --filter @codecave/api --prod --no-frozen-lockfile

# Copy built application from builder stage
COPY --from=builder /app/apps/api/dist ./apps/api/dist

# Copy generated Prisma client
COPY --from=builder /app/apps/api/generated ./apps/api/generated

# Copy any additional files needed at runtime
COPY --from=builder /app/apps/api/package*.json ./apps/api/

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Change ownership of app directory
RUN chown -R nextjs:nodejs /app
USER nextjs

# Expose the port
EXPOSE 3001

# Health check for container monitoring
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:3001/health || exit 1

# Use Doppler to inject environment variables and start the production server
# Falls back to direct start if Doppler is not available
CMD ["sh", "-c", "if [ -n \"$DOPPLER_TOKEN\" ]; then doppler run -- pnpm --filter @codecave/api start:prod; else pnpm --filter @codecave/api start:prod; fi"] 