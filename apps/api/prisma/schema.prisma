// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  GITHUB
  GOOGLE
}

model User {
  id              String       @id @default(uuid())
  email           String       @unique
  name            String
  avatar          String?
  bio             String?
  website         String?
  location        String?
  company         String?
  skills          String[]     @default([])
  provider        AuthProvider
  providerId      String
  githubUsername  String?
  projectsCount   Int          @default(0)
  followersCount  Int          @default(0)
  followingCount  Int          @default(0)
  isActive        Boolean      @default(true)
  isPro           Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations for future features
  projects  Project[]
  comments  Comment[]
  likes     Like[]
  followers Follow[]  @relation("UserFollowers")
  following Follow[]  @relation("UserFollowing")

  @@map("users")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  content     String?
  tags        String[] @default([])
  language    String?
  isPublic    Boolean  @default(true)
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("projects")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId  String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("likes")
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  followerId  String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
