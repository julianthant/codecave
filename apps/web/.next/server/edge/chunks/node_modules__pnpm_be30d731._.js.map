{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/common/debug-build.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/common/debug-build.ts"],"sourcesContent":["declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":"AAEA;;;;CAIA;;;AACO,MAAM,WAAA,GAAc,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA"}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/common/utils/responseEnd.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/common/utils/responseEnd.ts"],"sourcesContent":["import type { Span } from '@sentry/core';\nimport { debug, fill, flush, setHttpStatus } from '@sentry/core';\nimport type { ServerResponse } from 'http';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it ends the span and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param span The span tracking the request\n * @param res: The request's corresponding response\n */\nexport function autoEndSpanOnResponseEnd(span: Span, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      finishSpan(span, this);\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  // res.end may be undefined during build when using `next export` to statically export a Next.js app\n  if (res.end && !(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's span and set HTTP status data */\nexport function finishSpan(span: Span, res: ServerResponse): void {\n  setHttpStatus(span, res.statusCode);\n  span.end();\n}\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nexport async function flushSafelyWithTimeout(): Promise<void> {\n  try {\n    DEBUG_BUILD && debug.log('Flushing events...');\n    await flush(2000);\n    DEBUG_BUILD && debug.log('Done flushing events');\n  } catch (e) {\n    DEBUG_BUILD && debug.log('Error while flushing events:\\n', e);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AA4CA;;CAEA,GACO,eAAe,sBAAsB,GAAkB;IAC5D,IAAI;8YACF,cAAA,4PAAe,QAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC;QAC9C,iPAAM,QAAA,AAAK,EAAC,IAAI,CAAC;8YACjB,cAAA,4PAAe,QAAK,CAAC,GAAG,CAAC,sBAAsB,CAAC;IACpD,CAAE,CAAE,OAAO,CAAC,EAAE;8YACV,cAAA,4PAAe,QAAK,CAAC,GAAG,CAAC,gCAAgC,EAAE,CAAC,CAAC;IACjE;AACA"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/common/captureRequestError.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/common/captureRequestError.ts"],"sourcesContent":["import type { RequestEventData } from '@sentry/core';\nimport { captureException, headersToDict, vercelWaitUntil, withScope } from '@sentry/core';\nimport { flushSafelyWithTimeout } from './utils/responseEnd';\n\ntype RequestInfo = {\n  path: string;\n  method: string;\n  headers: Record<string, string | string[] | undefined>;\n};\n\ntype ErrorContext = {\n  routerKind: string; // 'Pages Router' | 'App Router'\n  routePath: string;\n  routeType: string; // 'render' | 'route' | 'middleware'\n};\n\n/**\n * Reports errors passed to the the Next.js `onRequestError` instrumentation hook.\n */\nexport function captureRequestError(error: unknown, request: RequestInfo, errorContext: ErrorContext): void {\n  withScope(scope => {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        headers: headersToDict(request.headers),\n        method: request.method,\n      } satisfies RequestEventData,\n    });\n\n    scope.setContext('nextjs', {\n      request_path: request.path,\n      router_kind: errorContext.routerKind,\n      router_path: errorContext.routePath,\n      route_type: errorContext.routeType,\n    });\n\n    scope.setTransactionName(errorContext.routePath);\n\n    captureException(error, {\n      mechanism: {\n        handled: false,\n      },\n    });\n\n    vercelWaitUntil(flushSafelyWithTimeout());\n  });\n}\n"],"names":[],"mappings":";;;;;;;;;;AAgBA;;CAEA,GACO,SAAS,mBAAmB,CAAC,KAAK,EAAW,OAAO,EAAe,YAAY,EAAsB;qPAC1G,YAAA,AAAS,GAAC,KAAA,IAAS;QACjB,KAAK,CAAC,wBAAwB,CAAC;YAC7B,iBAAiB,EAAE;gBACjB,OAAO,sPAAE,gBAAA,AAAa,EAAC,OAAO,CAAC,OAAO,CAAC;gBACvC,MAAM,EAAE,OAAO,CAAC,MAAM;YAC9B,CAAM;QACN,CAAK,CAAC;QAEF,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE;YACzB,YAAY,EAAE,OAAO,CAAC,IAAI;YAC1B,WAAW,EAAE,YAAY,CAAC,UAAU;YACpC,WAAW,EAAE,YAAY,CAAC,SAAS;YACnC,UAAU,EAAE,YAAY,CAAC,SAAS;QACxC,CAAK,CAAC;QAEF,KAAK,CAAC,kBAAkB,CAAC,YAAY,CAAC,SAAS,CAAC;mPAEhD,mBAAA,AAAgB,EAAC,KAAK,EAAE;YACtB,SAAS,EAAE;gBACT,OAAO,EAAE,KAAK;YACtB,CAAO;QACP,CAAK,CAAC;oQAEF,kBAAA,AAAe,kZAAC,yBAAA,AAAsB,EAAE,CAAC;IAC7C,CAAG,CAAC;AACJ"}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/common/utils/isBuild.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/common/utils/isBuild.ts"],"sourcesContent":["import { PHASE_PRODUCTION_BUILD } from 'next/constants';\n\n/**\n * Decide if the currently running process is part of the build phase or happening at runtime.\n */\nexport function isBuild(): boolean {\n  return process.env.NEXT_PHASE === PHASE_PRODUCTION_BUILD;\n}\n"],"names":[],"mappings":";;;;;AAEA;;CAEA,GACO,SAAS,OAAO,GAAY;IACjC,OAAO,OAAO,CAAC,GAAG,CAAC,UAAA,0WAAe,yBAAsB;AAC1D"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/edge/distDirRewriteFramesIntegration.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/edge/distDirRewriteFramesIntegration.ts"],"sourcesContent":["import { defineIntegration, escapeStringForRegex, rewriteFramesIntegration } from '@sentry/core';\n\nexport const distDirRewriteFramesIntegration = defineIntegration(({ distDirName }: { distDirName: string }) => {\n  const distDirAbsPath = distDirName.replace(/(\\/|\\\\)$/, ''); // We strip trailing slashes because \"app:///_next\" also doesn't have one\n\n  // Normally we would use `path.resolve` to obtain the absolute path we will strip from the stack frame to align with\n  // the uploaded artifacts, however we don't have access to that API in edge so we need to be a bit more lax.\n  // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- user input is escaped\n  const SOURCEMAP_FILENAME_REGEX = new RegExp(`.*${escapeStringForRegex(distDirAbsPath)}`);\n\n  const rewriteFramesIntegrationInstance = rewriteFramesIntegration({\n    iteratee: frame => {\n      frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next');\n      return frame;\n    },\n  });\n\n  return {\n    ...rewriteFramesIntegrationInstance,\n    name: 'DistDirRewriteFrames',\n  };\n});\n"],"names":[],"mappings":";;;;;;;AAEO,MAAM,+BAAA,kPAAkC,oBAAA,AAAiB,EAAC,CAAC,EAAE,WAAA,EAAa,KAA8B;IAC7G,MAAM,cAAA,GAAiB,WAAW,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA,CAAA,yEAAA;IAE5D,oHAAA;IACA,4GAAA;IACA,+FAAA;IACE,MAAM,wBAAA,GAA2B,IAAI,MAAM,CAAC,CAAC,EAAE,oQAAE,uBAAA,AAAoB,EAAC,cAAc,CAAC,CAAC,CAAA,CAAA;IAEA,MAAA,gCAAA,oQAAA,2BAAA,EAAA;QACA,QAAA,GAAA,KAAA,IAAA;YACA,KAAA,CAAA,QAAA,GAAA,KAAA,CAAA,QAAA,EAAA,OAAA,CAAA,wBAAA,EAAA,cAAA,CAAA;YACA,OAAA,KAAA;QACA,CAAA;IACA,CAAA,CAAA;IAEA,OAAA;QACA,GAAA,gCAAA;QACA,IAAA,EAAA,sBAAA;IACA,CAAA;AACA,CAAA"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/build/esm/edge/index.js","sources":["turbopack:///[project]/node_modules/.pnpm/@sentry+nextjs@9.40.0_@opentelemetry+context-async-hooks@1.30.1_@opentelemetry+core@1.30.1_@o_ovgtxusigv557lxw7cjbgcwlnu/node_modules/@sentry/nextjs/src/edge/index.ts"],"sourcesContent":["import {\n  applySdkMetadata,\n  getGlobalScope,\n  getRootSpan,\n  GLOBAL_OBJ,\n  registerSpanErrorInstrumentation,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  stripUrlQueryAndFragment,\n  vercelWaitUntil,\n} from '@sentry/core';\nimport type { VercelEdgeOptions } from '@sentry/vercel-edge';\nimport { getDefaultIntegrations, init as vercelEdgeInit } from '@sentry/vercel-edge';\nimport { isBuild } from '../common/utils/isBuild';\nimport { flushSafelyWithTimeout } from '../common/utils/responseEnd';\nimport { distDirRewriteFramesIntegration } from './distDirRewriteFramesIntegration';\n\nexport * from '@sentry/vercel-edge';\nexport * from '../common';\nexport { captureUnderscoreErrorException } from '../common/pages-router-instrumentation/_error';\nexport { wrapApiHandlerWithSentry } from './wrapApiHandlerWithSentry';\n\nexport type EdgeOptions = VercelEdgeOptions;\n\nconst globalWithInjectedValues = GLOBAL_OBJ as typeof GLOBAL_OBJ & {\n  _sentryRewriteFramesDistDir?: string;\n  _sentryRelease?: string;\n};\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): void {\n  registerSpanErrorInstrumentation();\n\n  if (isBuild()) {\n    return;\n  }\n\n  const customDefaultIntegrations = getDefaultIntegrations(options);\n\n  // This value is injected at build time, based on the output directory specified in the build config. Though a default\n  // is set there, we set it here as well, just in case something has gone wrong with the injection.\n  const distDirName = process.env._sentryRewriteFramesDistDir || globalWithInjectedValues._sentryRewriteFramesDistDir;\n\n  if (distDirName) {\n    customDefaultIntegrations.push(distDirRewriteFramesIntegration({ distDirName }));\n  }\n\n  const opts = {\n    defaultIntegrations: customDefaultIntegrations,\n    release: process.env._sentryRelease || globalWithInjectedValues._sentryRelease,\n    ...options,\n  };\n\n  applySdkMetadata(opts, 'nextjs', ['nextjs', 'vercel-edge']);\n\n  const client = vercelEdgeInit(opts);\n\n  client?.on('spanStart', span => {\n    const spanAttributes = spanToJSON(span).data;\n\n    // Mark all spans generated by Next.js as 'auto'\n    if (spanAttributes?.['next.span_type'] !== undefined) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, 'auto');\n    }\n\n    // Make sure middleware spans get the right op\n    if (spanAttributes?.['next.span_type'] === 'Middleware.execute') {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'http.server.middleware');\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'url');\n    }\n  });\n\n  // Use the preprocessEvent hook instead of an event processor, so that the users event processors receive the most\n  // up-to-date value, but also so that the logic that detects changes to the transaction names to set the source to\n  // \"custom\", doesn't trigger.\n  client?.on('preprocessEvent', event => {\n    // The otel auto inference will clobber the transaction name because the span has an http.target\n    if (\n      event.type === 'transaction' &&\n      event.contexts?.trace?.data?.['next.span_type'] === 'Middleware.execute' &&\n      event.contexts?.trace?.data?.['next.span_name']\n    ) {\n      if (event.transaction) {\n        event.transaction = stripUrlQueryAndFragment(event.contexts.trace.data['next.span_name']);\n      }\n    }\n  });\n\n  client?.on('spanEnd', span => {\n    if (span === getRootSpan(span)) {\n      vercelWaitUntil(flushSafelyWithTimeout());\n    }\n  });\n\n  try {\n    // @ts-expect-error `process.turbopack` is a magic string that will be replaced by Next.js\n    if (process.turbopack) {\n      getGlobalScope().setTag('turbopack', true);\n    }\n  } catch {\n    // Noop\n    // The statement above can throw because process is not defined on the client\n  }\n}\n\n/**\n * Just a passthrough in case this is imported from the client.\n */\nexport function withSentryConfig<T>(exportedUserNextConfig: T): T {\n  return exportedUserNextConfig;\n}\n"],"names":["vercelEdgeInit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAM,wBAAA,qPAA2B,aAAA;AAKjC,qDAAA,GACO,SAAS,IAAI,CAAC,OAAO,GAAsB,CAAA,CAAE,EAAQ;IAC1D,wRAAA,AAAgC,EAAE;IAElC,gZAAI,UAAA,AAAO,EAAE,GAAE;QACb;IACJ;IAEE,MAAM,yBAAA,OAA4B,iaAAA,AAAsB,EAAC,OAAO,CAAC;IAEnE,sHAAA;IACA,kGAAA;IACE,MAAM,WAAA,GAAc,OAAO,CAAC,GAAG,CAAC,2BAAA,MAA+B,wBAAwB,CAAC,2BAA2B;IAEnH,IAAI,WAAW,yBAAE;QACf,yBAAyB,CAAC,IAAI,KAAC,ubAAA,AAA+B,EAAC;YAAE,WAAA;QAAA,CAAa,CAAC,CAAC;IACpF;IAEE,MAAM,OAAO;QACX,mBAAmB,EAAE,yBAAyB;QAC9C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,cAAA,sDAAkB,wBAAwB,CAAC,cAAc;QAC9E,GAAG,OAAO;IACd,CAAG;IAED,2QAAA,AAAgB,EAAC,IAAI,EAAE,QAAQ,EAAE;QAAC,QAAQ;QAAE,aAAa;KAAC,CAAC;IAE3D,MAAM,MAAA,+YAASA,OAAAA,AAAc,EAAC,IAAI,CAAC;IAEnC,MAAM,EAAE,EAAE,CAAC,WAAW,GAAE,QAAQ;QAC9B,MAAM,uQAAiB,aAAA,AAAU,EAAC,IAAI,CAAC,CAAC,IAAI;QAEhD,gDAAA;QACI,IAAI,cAAc,EAAA,CAAG,gBAAgB,CAAA,KAAM,SAAS,EAAE;YACpD,IAAI,CAAC,YAAY,mPAAC,mCAAgC,EAAE,MAAM,CAAC;QACjE;QAEA,8CAAA;QACI,IAAI,cAAc,EAAA,CAAG,gBAAgB,CAAA,KAAM,oBAAoB,EAAE;YAC/D,IAAI,CAAC,YAAY,mPAAC,+BAA4B,EAAE,wBAAwB,CAAC;YACzE,IAAI,CAAC,YAAY,kPAAC,oCAAgC,EAAE,KAAK,CAAC;QAChE;IACA,CAAG,CAAC;IAEJ,kHAAA;IACA,kHAAA;IACA,6BAAA;IACE,MAAM,EAAE,EAAE,CAAC,iBAAiB,GAAE,SAAS;QACzC,gGAAA;QACI,IACE,KAAK,CAAC,IAAA,KAAS,aAAA,IACf,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAA,CAAG,gBAAgB,CAAA,KAAM,oBAAA,IACpD,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAA,CAAG,gBAAgB,CAAA,EAC9C;YACA,IAAI,KAAK,CAAC,WAAW,EAAE;gBACrB,KAAK,CAAC,WAAA,mPAAc,2BAAA,AAAwB,EAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACjG;QACA;IACA,CAAG,CAAC;IAEF,MAAM,EAAE,EAAE,CAAC,SAAS,GAAE,QAAQ;QAC5B,IAAI,IAAA,MAAS,mQAAA,AAAW,EAAC,IAAI,CAAC,EAAE;wQAC9B,kBAAA,AAAe,kZAAC,yBAAA,AAAsB,EAAE,CAAC;QAC/C;IACA,CAAG,CAAC;IAEF,IAAI;QACN,0FAAA;QACI,IAAI,OAAO,CAAC,SAAS,mBAAE;6PACrB,iBAAA,AAAc,EAAE,EAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;QAChD;IACA,EAAI,OAAM;IACV,OAAA;IACA,6EAAA;IACA;AACA;AAEA;;CAEA,GACO,SAAS,gBAAgB,CAAI,sBAAsB,EAAQ;IAChE,OAAO,sBAAsB;AAC/B"}},
    {"offset": {"line": 243, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/context/context.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAIH,mDAAA,EAAqD;;;;AAC/C,SAAU,gBAAgB,CAAC,WAAmB;IAClD,0EAA0E;IAC1E,2EAA2E;IAC3E,wEAAwE;IACxE,mDAAmD;IACnD,EAAE;IACF,8EAA8E;IAC9E,OAAO,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACjC,CAAC;AAED,IAAA,cAAA;IAGE;;;;OAIG,CACH,SAAA,YAAY,aAAoC;QAC9C,mBAAmB;QACnB,IAAM,IAAI,GAAG,IAAI,CAAC;QAElB,IAAI,CAAC,eAAe,GAAG,aAAa,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;QAE1E,IAAI,CAAC,QAAQ,GAAG,SAAC,GAAW;YAAK,OAAA,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC;QAA7B,CAA6B,CAAC;QAE/D,IAAI,CAAC,QAAQ,GAAG,SAAC,GAAW,EAAE,KAAc;YAC1C,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACtD,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACxC,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,SAAC,GAAW;YAC7B,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACtD,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACpC,OAAO,OAAO,CAAC;QACjB,CAAC,CAAC;IACJ,CAAC;IAyBH,OAAA,WAAC;AAAD,CAAC,AApDD,IAoDC;AAGM,IAAM,YAAY,GAAY,IAAI,WAAW,EAAE,CAAC"}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/context/NoopContextManager.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGzC,IAAA,qBAAA;IAAA,SAAA,sBAyBA,CAAC;IAxBC,mBAAA,SAAA,CAAA,MAAM,GAAN;QACE,mQAAO,gBAAY,CAAC;IACtB,CAAC;IAED,mBAAA,SAAA,CAAA,IAAI,GAAJ,SACE,QAAuB,EACvB,EAAK,EACL,OAA8B;QAC9B,IAAA,OAAA,EAAA,CAAU;YAAV,IAAA,KAAA,CAAU,EAAV,KAAA,UAAA,MAAU,EAAV,IAAU,CAAA;YAAV,IAAA,CAAA,KAAA,EAAA,GAAA,SAAA,CAAA,GAAA,CAAU;;QAEV,OAAO,EAAE,CAAC,IAAI,CAAA,KAAA,CAAP,EAAE,EAAA,cAAA;YAAM,OAAO;SAAA,EAAA,OAAK,IAAI,GAAA,QAAE;IACnC,CAAC;IAED,mBAAA,SAAA,CAAA,IAAI,GAAJ,SAAQ,QAAuB,EAAE,MAAS;QACxC,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,mBAAA,SAAA,CAAA,MAAM,GAAN;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,mBAAA,SAAA,CAAA,OAAO,GAAP;QACE,OAAO,IAAI,CAAC;IACd,CAAC;IACH,OAAA,kBAAC;AAAD,CAAC,AAzBD,IAyBC"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/browser/globalThis.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/platform/browser/globalThis.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Updates to this file should also be replicated to @opentelemetry/core too.\n\n/**\n * - globalThis (New standard)\n * - self (Will return the current window instance for supported browsers)\n * - window (fallback for older browser implementations)\n * - global (NodeJS implementation)\n * - <object> (When all else fails)\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins, no-undef\nexport const _globalThis: typeof globalThis =\n  typeof globalThis === 'object'\n    ? globalThis\n    : typeof self === 'object'\n    ? self\n    : typeof window === 'object'\n    ? window\n    : typeof global === 'object'\n    ? global\n    : ({} as typeof globalThis);\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,6EAA6E;AAE7E;;;;;;GAMG,CAEH,8DAAA,EAAgE,CAChE,8EAA8E;;;;AACvE,IAAM,WAAW,GACtB,OAAO,UAAU,KAAK,QAAQ,GAC1B,UAAU,GACV,OAAO,IAAI,KAAK,QAAQ,GACxB,IAAI,GACJ,OAAO,MAAM,KAAK,QAAQ,YAC1B,MAAM,oBACN,OAAO,MAAM,KAAK,QAAQ,2DAEzB,EAAwB,CAAC"}},
    {"offset": {"line": 408, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/version.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.9.0';\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,4DAA4D;;;;AACrD,IAAM,OAAO,GAAG,OAAO,CAAC"}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/semver.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;;AAErC,IAAM,EAAE,GAAG,+BAA+B,CAAC;AAkBrC,SAAU,uBAAuB,CACrC,UAAkB;IAElB,IAAM,gBAAgB,GAAG,IAAI,GAAG,CAAS;QAAC,UAAU;KAAC,CAAC,CAAC;IACvD,IAAM,gBAAgB,GAAG,IAAI,GAAG,EAAU,CAAC;IAE3C,IAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC5C,IAAI,CAAC,cAAc,EAAE;QACnB,6DAA6D;QAC7D,OAAO;YAAM,OAAA,KAAK;QAAL,CAAK,CAAC;KACpB;IAED,IAAM,gBAAgB,GAAG;QACvB,KAAK,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QACzB,KAAK,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QACzB,KAAK,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QACzB,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;KAC9B,CAAC;IAEF,kEAAkE;IAClE,IAAI,gBAAgB,CAAC,UAAU,IAAI,IAAI,EAAE;QACvC,OAAO,SAAS,YAAY,CAAC,aAAqB;YAChD,OAAO,aAAa,KAAK,UAAU,CAAC;QACtC,CAAC,CAAC;KACH;IAED,SAAS,OAAO,CAAC,CAAS;QACxB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,SAAS,OAAO,CAAC,CAAS;QACxB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,SAAS,YAAY,CAAC,aAAqB;QAChD,IAAI,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC;SACb;QAED,IAAI,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;YACvC,OAAO,KAAK,CAAC;SACd;QAED,IAAM,kBAAkB,GAAG,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,kBAAkB,EAAE;YACvB,6BAA6B;YAC7B,sDAAsD;YACtD,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/B;QAED,IAAM,mBAAmB,GAAG;YAC1B,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7B,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7B,KAAK,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7B,UAAU,EAAE,kBAAkB,CAAC,CAAC,CAAC;SAClC,CAAC;QAEF,qEAAqE;QACrE,IAAI,mBAAmB,CAAC,UAAU,IAAI,IAAI,EAAE;YAC1C,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/B;QAED,4BAA4B;QAC5B,IAAI,gBAAgB,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,EAAE;YACxD,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/B;QAED,IAAI,gBAAgB,CAAC,KAAK,KAAK,CAAC,EAAE;YAChC,IACE,gBAAgB,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,IACpD,gBAAgB,CAAC,KAAK,IAAI,mBAAmB,CAAC,KAAK,EACnD;gBACA,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;aAC/B;YAED,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/B;QAED,IAAI,gBAAgB,CAAC,KAAK,IAAI,mBAAmB,CAAC,KAAK,EAAE;YACvD,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/B;QAED,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;IAChC,CAAC,CAAC;AACJ,CAAC;AAiBM,IAAM,YAAY,GAAG,uBAAuB,mPAAC,UAAO,CAAC,CAAC"}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/internal/global-utils.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;AAKH,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAG1C,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;;;;AAExC,IAAM,KAAK,qPAAG,UAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACpC,IAAM,4BAA4B,GAAG,MAAM,CAAC,GAAG,CAC7C,0BAAwB,KAAO,CAChC,CAAC;AAEF,IAAM,OAAO,GAAG,0RAAyB,CAAC;AAEpC,SAAU,cAAc,CAC5B,IAAU,EACV,QAA6B,EAC7B,IAAgB,EAChB,aAAqB;;IAArB,IAAA,kBAAA,KAAA,GAAA;QAAA,gBAAA,KAAqB;IAAA;IAErB,IAAM,GAAG,GAAG,AAAC,OAAO,CAAC,4BAA4B,CAAC,GAAG,CAAA,KAAA,OAAO,CAC1D,4BAA4B,CAC7B,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI;QACH,OAAO,oPAAE,UAAO;KACjB,CAAC,CAAC;IAEH,IAAI,CAAC,aAAa,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE;QAC/B,yCAAyC;QACzC,IAAM,GAAG,GAAG,IAAI,KAAK,CACnB,kEAAgE,IAAM,CACvE,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC;KACd;IAED,IAAI,GAAG,CAAC,OAAO,KAAK,4PAAO,EAAE;QAC3B,0DAA0D;QAC1D,IAAM,GAAG,GAAG,IAAI,KAAK,CACnB,kDAAgD,GAAG,CAAC,OAAO,GAAA,UAAQ,IAAI,GAAA,kSAA8C,UAAS,CAC/H,CAAC;QACF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC;KACd;IAED,GAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;IACrB,IAAI,CAAC,KAAK,CACR,iDAA+C,IAAI,GAAA,yPAAK,UAAO,GAAA,GAAG,CACnE,CAAC;IAEF,OAAO,IAAI,CAAC;AACd,CAAC;AAEK,SAAU,SAAS,CACvB,IAAU;;IAEV,IAAM,aAAa,GAAG,CAAA,KAAA,OAAO,CAAC,4BAA4B,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,OAAO,CAAC;IACrE,IAAI,CAAC,aAAa,IAAI,kQAAC,eAAA,AAAY,EAAC,aAAa,CAAC,EAAE;QAClD,OAAO;KACR;IACD,OAAO,CAAA,KAAA,OAAO,CAAC,4BAA4B,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,EAAA,CAAG,IAAI,CAAC,CAAC;AACvD,CAAC;AAEK,SAAU,gBAAgB,CAAC,IAAyB,EAAE,IAAgB;IAC1E,IAAI,CAAC,KAAK,CACR,oDAAkD,IAAI,GAAA,yPAAK,UAAO,GAAA,GAAG,CACtE,CAAC;IACF,IAAM,GAAG,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAElD,IAAI,GAAG,EAAE;QACP,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;KAClB;AACH,CAAC"}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGrD;;;;;;;;GAQG,CACH,IAAA,sBAAA;IAGE,SAAA,oBAAY,KAA6B;QACvC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,IAAI,qBAAqB,CAAC;IAC7D,CAAC;IAEM,oBAAA,SAAA,CAAA,KAAK,GAAZ;QAAa,IAAA,OAAA,EAAA,CAAc;YAAd,IAAA,KAAA,CAAc,EAAd,KAAA,UAAA,MAAc,EAAd,IAAc,CAAA;YAAd,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAc;;QACzB,OAAO,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,oBAAA,SAAA,CAAA,KAAK,GAAZ;QAAa,IAAA,OAAA,EAAA,CAAc;YAAd,IAAA,KAAA,CAAc,EAAd,KAAA,UAAA,MAAc,EAAd,IAAc,CAAA;YAAd,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAc;;QACzB,OAAO,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,oBAAA,SAAA,CAAA,IAAI,GAAX;QAAY,IAAA,OAAA,EAAA,CAAc;YAAd,IAAA,KAAA,CAAc,EAAd,KAAA,UAAA,MAAc,EAAd,IAAc,CAAA;YAAd,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAc;;QACxB,OAAO,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,oBAAA,SAAA,CAAA,IAAI,GAAX;QAAY,IAAA,OAAA,EAAA,CAAc;YAAd,IAAA,KAAA,CAAc,EAAd,KAAA,UAAA,MAAc,EAAd,IAAc,CAAA;YAAd,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAc;;QACxB,OAAO,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAEM,oBAAA,SAAA,CAAA,OAAO,GAAd;QAAe,IAAA,OAAA,EAAA,CAAc;YAAd,IAAA,KAAA,CAAc,EAAd,KAAA,UAAA,MAAc,EAAd,IAAc,CAAA;YAAd,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAc;;QAC3B,OAAO,QAAQ,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACpD,CAAC;IACH,OAAA,mBAAC;AAAD,CAAC,AA1BD,IA0BC;;AAED,SAAS,QAAQ,CACf,QAA0B,EAC1B,SAAiB,EACjB,IAAS;IAET,IAAM,MAAM,6QAAG,YAAA,AAAS,EAAC,MAAM,CAAC,CAAC;IACjC,6BAA6B;IAC7B,IAAI,CAAC,MAAM,EAAE;QACX,OAAO;KACR;IAED,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACxB,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAA,KAAA,CAAhB,MAAM,EAAA,cAAA,EAAA,EAAA,OAAe,IAAoC,GAAA,QAAE;AACpE,CAAC"}},
    {"offset": {"line": 709, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/types.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type DiagLogFunction = (message: string, ...args: unknown[]) => void;\n\n/**\n * Defines an internal diagnostic logger interface which is used to log internal diagnostic\n * messages, you can set the default diagnostic logger via the {@link DiagAPI} setLogger function.\n * API provided implementations include :-\n * - a No-Op {@link createNoopDiagLogger}\n * - a {@link DiagLogLevel} filtering wrapper {@link createLogLevelDiagLogger}\n * - a general Console {@link DiagConsoleLogger} version.\n */\nexport interface DiagLogger {\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  error: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  warn: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  info: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario.\n   * For example: Logging the order of execution of async operations.\n   */\n  debug: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  verbose: DiagLogFunction;\n}\n\n/**\n * Defines the available internal logging levels for the diagnostic logger, the numeric values\n * of the levels are defined to match the original values from the initial LogLevel to avoid\n * compatibility/migration issues for any implementation that assume the numeric ordering.\n */\nexport enum DiagLogLevel {\n  /** Diagnostic Logging level setting to disable all logging (except and forced logs) */\n  NONE = 0,\n\n  /** Identifies an error scenario */\n  ERROR = 30,\n\n  /** Identifies a warning scenario */\n  WARN = 50,\n\n  /** General informational log message */\n  INFO = 60,\n\n  /** General debug log message */\n  DEBUG = 70,\n\n  /**\n   * Detailed trace level logging should only be used for development, should only be set\n   * in a development environment.\n   */\n  VERBOSE = 80,\n\n  /** Used to set the logging level to include all logging */\n  ALL = 9999,\n}\n\n/**\n * Defines options for ComponentLogger\n */\nexport interface ComponentLoggerOptions {\n  namespace: string;\n}\n\nexport interface DiagLoggerOptions {\n  /**\n   * The {@link DiagLogLevel} used to filter logs sent to the logger.\n   *\n   * @defaultValue DiagLogLevel.INFO\n   */\n  logLevel?: DiagLogLevel;\n\n  /**\n   * Setting this value to `true` will suppress the warning message normally emitted when registering a logger when another logger is already registered.\n   */\n  suppressOverrideMessage?: boolean;\n}\n\nexport interface DiagLoggerApi {\n  /**\n   * Set the global DiagLogger and DiagLogLevel.\n   * If a global diag logger is already set, this will override it.\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param options - A {@link DiagLoggerOptions} object. If not provided, default values will be set.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, options?: DiagLoggerOptions): boolean;\n\n  /**\n   *\n   * @param logger - The {@link DiagLogger} instance to set as the default logger.\n   * @param logLevel - The {@link DiagLogLevel} used to filter logs sent to the logger. If not provided it will default to {@link DiagLogLevel.INFO}.\n   * @returns `true` if the logger was successfully registered, else `false`\n   */\n  setLogger(logger: DiagLogger, logLevel?: DiagLogLevel): boolean;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CA+CH;;;;GAIG;;;AACH,IAAY,YAwBX;AAxBD,CAAA,SAAY,YAAY;IACtB,qFAAA,EAAuF,CACvF,YAAA,CAAA,YAAA,CAAA,OAAA,GAAA,EAAA,GAAA,MAAQ,CAAA;IAER,iCAAA,EAAmC,CACnC,YAAA,CAAA,YAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IAEV,kCAAA,EAAoC,CACpC,YAAA,CAAA,YAAA,CAAA,OAAA,GAAA,GAAA,GAAA,MAAS,CAAA;IAET,sCAAA,EAAwC,CACxC,YAAA,CAAA,YAAA,CAAA,OAAA,GAAA,GAAA,GAAA,MAAS,CAAA;IAET,8BAAA,EAAgC,CAChC,YAAA,CAAA,YAAA,CAAA,QAAA,GAAA,GAAA,GAAA,OAAU,CAAA;IAEV;;;OAGG,CACH,YAAA,CAAA,YAAA,CAAA,UAAA,GAAA,GAAA,GAAA,SAAY,CAAA;IAEZ,yDAAA,EAA2D,CAC3D,YAAA,CAAA,YAAA,CAAA,MAAA,GAAA,KAAA,GAAA,KAAU,CAAA;AACZ,CAAC,EAxBW,YAAY,IAAA,CAAZ,YAAY,GAAA,CAAA,CAAA,GAwBvB"}},
    {"offset": {"line": 747, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAA+B,YAAY,EAAE,MAAM,UAAU,CAAC;;AAE/D,SAAU,wBAAwB,CACtC,QAAsB,EACtB,MAAkB;IAElB,IAAI,QAAQ,2PAAG,eAAY,CAAC,IAAI,EAAE;QAChC,QAAQ,2PAAG,eAAY,CAAC,IAAI,CAAC;KAC9B,MAAM,IAAI,QAAQ,2PAAG,eAAY,CAAC,GAAG,EAAE;QACtC,QAAQ,2PAAG,eAAY,CAAC,GAAG,CAAC;KAC7B;IAED,0CAA0C;IAC1C,MAAM,GAAG,MAAM,IAAI,CAAA,CAAE,CAAC;IAEtB,SAAS,WAAW,CAClB,QAA0B,EAC1B,QAAsB;QAEtB,IAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEjC,IAAI,OAAO,OAAO,KAAK,UAAU,IAAI,QAAQ,IAAI,QAAQ,EAAE;YACzD,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC7B;QACD,OAAO,YAAa,CAAC,CAAC;IACxB,CAAC;IAED,OAAO;QACL,KAAK,EAAE,WAAW,CAAC,OAAO,0PAAE,eAAY,CAAC,KAAK,CAAC;QAC/C,IAAI,EAAE,WAAW,CAAC,MAAM,0PAAE,eAAY,CAAC,IAAI,CAAC;QAC5C,IAAI,EAAE,WAAW,CAAC,MAAM,0PAAE,eAAY,CAAC,IAAI,CAAC;QAC5C,KAAK,EAAE,WAAW,CAAC,OAAO,0PAAE,eAAY,CAAC,KAAK,CAAC;QAC/C,OAAO,EAAE,WAAW,CAAC,SAAS,0PAAE,eAAY,CAAC,OAAO,CAAC;KACtD,CAAC;AACJ,CAAC"}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/diag.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport {\n  ComponentLoggerOptions,\n  DiagLogFunction,\n  DiagLogger,\n  DiagLoggerApi,\n  DiagLogLevel,\n} from '../diag/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\n\nconst API_NAME = 'diag';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nexport class DiagAPI implements DiagLogger, DiagLoggerApi {\n  private static _instance?: DiagAPI;\n\n  /** Get the singleton instance of the DiagAPI API */\n  public static instance(): DiagAPI {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Private internal constructor\n   * @private\n   */\n  private constructor() {\n    function _logProxy(funcName: keyof DiagLogger): DiagLogFunction {\n      return function (...args) {\n        const logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName](...args);\n      };\n    }\n\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    const self = this;\n\n    // DiagAPI specific functions\n\n    const setLogger: DiagLoggerApi['setLogger'] = (\n      logger,\n      optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }\n    ) => {\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        const err = new Error(\n          'Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation'\n        );\n        self.error(err.stack ?? err.message);\n        return false;\n      }\n\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel,\n        };\n      }\n\n      const oldLogger = getGlobal('diag');\n      const newLogger = createLogLevelDiagLogger(\n        optionsOrLogLevel.logLevel ?? DiagLogLevel.INFO,\n        logger\n      );\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        const stack = new Error().stack ?? '<failed to generate stacktrace>';\n        oldLogger.warn(`Current logger will be overwritten from ${stack}`);\n        newLogger.warn(\n          `Current logger will overwrite one already registered from ${stack}`\n        );\n      }\n\n      return registerGlobal('diag', newLogger, self, true);\n    };\n\n    self.setLogger = setLogger;\n\n    self.disable = () => {\n      unregisterGlobal(API_NAME, self);\n    };\n\n    self.createComponentLogger = (options: ComponentLoggerOptions) => {\n      return new DiagComponentLogger(options);\n    };\n\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n\n  public setLogger!: DiagLoggerApi['setLogger'];\n  /**\n   *\n   */\n  public createComponentLogger!: (\n    options: ComponentLoggerOptions\n  ) => DiagLogger;\n\n  // DiagLogger implementation\n  public verbose!: DiagLogFunction;\n  public debug!: DiagLogFunction;\n  public info!: DiagLogFunction;\n  public warn!: DiagLogFunction;\n  public error!: DiagLogFunction;\n\n  /**\n   * Unregister the global logger and return to Noop\n   */\n  public disable!: () => void;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 927, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/context.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { Context, ContextManager } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'context';\nconst NOOP_CONTEXT_MANAGER = new NoopContextManager();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nexport class ContextAPI {\n  private static _instance?: ContextAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Context API */\n  public static getInstance(): ContextAPI {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  public setGlobalContextManager(contextManager: ContextManager): boolean {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  }\n\n  /**\n   * Get the currently active context\n   */\n  public active(): Context {\n    return this._getContextManager().active();\n  }\n\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  public with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return this._getContextManager().with(context, fn, thisArg, ...args);\n  }\n\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  public bind<T>(context: Context, target: T): T {\n    return this._getContextManager().bind(context, target);\n  }\n\n  private _getContextManager(): ContextManager {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  }\n\n  /** Disable and remove the global context manager */\n  public disable() {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAEnE,OAAO,EACL,SAAS,EACT,cAAc,EACd,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEjC,IAAM,QAAQ,GAAG,SAAS,CAAC;AAC3B,IAAM,oBAAoB,GAAG,4QAAI,qBAAkB,EAAE,CAAC;AAEtD;;GAEG,CACH,IAAA,aAAA;IAGE,6FAAA,EAA+F,CAC/F,SAAA,cAAuB,CAAC;IAExB,kDAAA,EAAoD,CACtC,WAAA,WAAW,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACnC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;OAIG,CACI,WAAA,SAAA,CAAA,uBAAuB,GAA9B,SAA+B,cAA8B;QAC3D,iRAAO,iBAAA,AAAc,EAAC,QAAQ,EAAE,cAAc,wPAAE,UAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtE,CAAC;IAED;;OAEG,CACI,WAAA,SAAA,CAAA,MAAM,GAAb;QACE,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,MAAM,EAAE,CAAC;IAC5C,CAAC;IAED;;;;;;;OAOG,CACI,WAAA,SAAA,CAAA,IAAI,GAAX,SACE,OAAgB,EAChB,EAAK,EACL,OAA8B;;QAC9B,IAAA,OAAA,EAAA,CAAU;YAAV,IAAA,KAAA,CAAU,EAAV,KAAA,UAAA,MAAU,EAAV,IAAU,CAAA;YAAV,IAAA,CAAA,KAAA,EAAA,GAAA,SAAA,CAAA,GAAA,CAAU;;QAEV,OAAO,CAAA,KAAA,IAAI,CAAC,kBAAkB,EAAE,CAAA,CAAC,IAAI,CAAA,KAAA,CAAA,IAAA,cAAA;YAAC,OAAO;YAAE,EAAE;YAAE,OAAO;SAAA,EAAA,OAAK,IAAI,GAAA,QAAE;IACvE,CAAC;IAED;;;;;OAKG,CACI,WAAA,SAAA,CAAA,IAAI,GAAX,SAAe,OAAgB,EAAE,MAAS;QACxC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC;IAEO,WAAA,SAAA,CAAA,kBAAkB,GAA1B;QACE,iRAAO,YAAA,AAAS,EAAC,QAAQ,CAAC,IAAI,oBAAoB,CAAC;IACrD,CAAC;IAED,kDAAA,EAAoD,CAC7C,WAAA,SAAA,CAAA,OAAO,GAAd;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC,OAAO,EAAE,CAAC;kRACpC,mBAAA,AAAgB,EAAC,QAAQ,wPAAE,UAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjD,CAAC;IACH,OAAA,UAAC;AAAD,CAAC,AAnED,IAmEC"}},
    {"offset": {"line": 1044, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/context-api.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { ContextAPI } from './api/context';\n/** Entrypoint for context API */\nexport const context = ContextAPI.getInstance();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,sEAAsE;AACtE,qCAAqC;;;;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAEpC,IAAM,OAAO,4PAAG,aAAU,CAAC,WAAW,EAAE,CAAC"}},
    {"offset": {"line": 1070, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/trace_flags.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum TraceFlags {\n  /** Represents no flag set. */\n  NONE = 0x0,\n  /** Bit to represent whether trace is sampled in trace flags. */\n  SAMPLED = 0x1 << 0,\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AACH,IAAY,UAKX;AALD,CAAA,SAAY,UAAU;IACpB,4BAAA,EAA8B,CAC9B,UAAA,CAAA,UAAA,CAAA,OAAA,GAAA,EAAA,GAAA,MAAU,CAAA;IACV,8DAAA,EAAgE,CAChE,UAAA,CAAA,UAAA,CAAA,UAAA,GAAA,EAAA,GAAA,SAAkB,CAAA;AACpB,CAAC,EALW,UAAU,IAAA,CAAV,UAAU,GAAA,CAAA,CAAA,GAKrB"}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/invalid-span-constants.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanContext } from './span_context';\nimport { TraceFlags } from './trace_flags';\n\nexport const INVALID_SPANID = '0000000000000000';\nexport const INVALID_TRACEID = '00000000000000000000000000000000';\nexport const INVALID_SPAN_CONTEXT: SpanContext = {\n  traceId: INVALID_TRACEID,\n  spanId: INVALID_SPANID,\n  traceFlags: TraceFlags.NONE,\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAEpC,IAAM,cAAc,GAAG,kBAAkB,CAAC;AAC1C,IAAM,eAAe,GAAG,kCAAkC,CAAC;AAC3D,IAAM,oBAAoB,GAAgB;IAC/C,OAAO,EAAE,eAAe;IACxB,MAAM,EAAE,cAAc;IACtB,UAAU,iQAAE,aAAU,CAAC,IAAI;CAC5B,CAAC"}},
    {"offset": {"line": 1128, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\nimport { Link } from './link';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  addLink(_link: Link): this {\n    return this;\n  }\n\n  addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAKH,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;;AAMhE;;;;GAIG,CACH,IAAA,mBAAA;IACE,SAAA,iBACmB,YAAgD;QAAhD,IAAA,iBAAA,KAAA,GAAA;YAAA,eAAA,+QAAA,CAAA,uBAAgD;QAAA;QAAhD,IAAA,CAAA,YAAY,GAAZ,YAAY,CAAoC;IAChE,CAAC;IAEJ,yBAAyB;IACzB,iBAAA,SAAA,CAAA,WAAW,GAAX;QACE,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,YAAY,GAAZ,SAAa,IAAY,EAAE,MAAe;QACxC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,aAAa,GAAb,SAAc,WAA2B;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,QAAQ,GAAR,SAAS,KAAa,EAAE,WAA4B;QAClD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iBAAA,SAAA,CAAA,OAAO,GAAP,SAAQ,KAAW;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,iBAAA,SAAA,CAAA,QAAQ,GAAR,SAAS,MAAc;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,SAAS,GAAT,SAAU,OAAmB;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,UAAU,GAAV,SAAW,KAAa;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,GAAG,GAAH,SAAI,QAAoB,GAAS,CAAC;IAElC,yDAAyD;IACzD,iBAAA,SAAA,CAAA,WAAW,GAAX;QACE,OAAO,KAAK,CAAC;IACf,CAAC;IAED,0BAA0B;IAC1B,iBAAA,SAAA,CAAA,eAAe,GAAf,SAAgB,UAAqB,EAAE,KAAiB,GAAS,CAAC;IACpE,OAAA,gBAAC;AAAD,CAAC,AArDD,IAqDC"}},
    {"offset": {"line": 1204, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/context-utils.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;AAEH,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAItD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;;;;AAE5C;;GAEG,CACH,IAAM,QAAQ,oQAAG,mBAAA,AAAgB,EAAC,gCAAgC,CAAC,CAAC;AAO9D,SAAU,OAAO,CAAC,OAAgB;IACtC,OAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAU,IAAI,SAAS,CAAC;AAC3D,CAAC;AAKK,SAAU,aAAa;IAC3B,OAAO,OAAO,0PAAC,aAAU,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;AACpD,CAAC;AAQK,SAAU,OAAO,CAAC,OAAgB,EAAE,IAAU;IAClD,OAAO,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAC1C,CAAC;AAOK,SAAU,UAAU,CAAC,OAAgB;IACzC,OAAO,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AASK,SAAU,cAAc,CAC5B,OAAgB,EAChB,WAAwB;IAExB,OAAO,OAAO,CAAC,OAAO,EAAE,wQAAI,mBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;AAC7D,CAAC;AAOK,SAAU,cAAc,CAAC,OAAgB;;IAC7C,OAAO,CAAA,KAAA,OAAO,CAAC,OAAO,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,EAAE,CAAC;AACzC,CAAC"}},
    {"offset": {"line": 1258, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;AACH,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3E,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;;;AAItD,IAAM,mBAAmB,GAAG,mBAAmB,CAAC;AAChD,IAAM,kBAAkB,GAAG,iBAAiB,CAAC;AAEvC,SAAU,cAAc,CAAC,OAAe;IAC5C,OAAO,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,OAAO,qRAAK,kBAAe,CAAC;AAC1E,CAAC;AAEK,SAAU,aAAa,CAAC,MAAc;IAC1C,OAAO,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,MAAM,qRAAK,iBAAc,CAAC;AACtE,CAAC;AAMK,SAAU,kBAAkB,CAAC,WAAwB;IACzD,OAAO,AACL,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CACzE,CAAC;AACJ,CAAC;AAQK,SAAU,eAAe,CAAC,WAAwB;IACtD,OAAO,wQAAI,mBAAgB,CAAC,WAAW,CAAC,CAAC;AAC3C,CAAC"}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NoopTracer.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { Context } from '../context/types';\nimport { getSpanContext, setSpan } from '../trace/context-utils';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { isSpanContextValid } from './spancontext-utils';\nimport { SpanOptions } from './SpanOptions';\nimport { SpanContext } from './span_context';\nimport { Tracer } from './tracer';\n\nconst contextApi = ContextAPI.getInstance();\n\n/**\n * No-op implementations of {@link Tracer}.\n */\nexport class NoopTracer implements Tracer {\n  // startSpan starts a noop span.\n  startSpan(\n    name: string,\n    options?: SpanOptions,\n    context = contextApi.active()\n  ): Span {\n    const root = Boolean(options?.root);\n    if (root) {\n      return new NonRecordingSpan();\n    }\n\n    const parentFromContext = context && getSpanContext(context);\n\n    if (\n      isSpanContext(parentFromContext) &&\n      isSpanContextValid(parentFromContext)\n    ) {\n      return new NonRecordingSpan(parentFromContext);\n    } else {\n      return new NonRecordingSpan();\n    }\n  }\n\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    opts: SpanOptions | undefined,\n    ctx: Context | undefined,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | SpanOptions,\n    arg3?: F | Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: SpanOptions | undefined;\n    let ctx: Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as SpanOptions | undefined;\n      ctx = arg3 as Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? contextApi.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = setSpan(parentContext, span);\n\n    return contextApi.with(contextWithSpanSet, fn, undefined, span);\n  }\n}\n\nfunction isSpanContext(spanContext: any): spanContext is SpanContext {\n  return (\n    typeof spanContext === 'object' &&\n    typeof spanContext['spanId'] === 'string' &&\n    typeof spanContext['traceId'] === 'string' &&\n    typeof spanContext['traceFlags'] === 'number'\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAE5C,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;;;;;AAKzD,IAAM,UAAU,4PAAG,aAAU,CAAC,WAAW,EAAE,CAAC;AAE5C;;GAEG,CACH,IAAA,aAAA;IAAA,SAAA,cAoEA,CAAC;IAnEC,gCAAgC;IAChC,WAAA,SAAA,CAAA,SAAS,GAAT,SACE,IAAY,EACZ,OAAqB,EACrB,OAA6B;QAA7B,IAAA,YAAA,KAAA,GAAA;YAAA,UAAU,UAAU,CAAC,MAAM,EAAE;QAAA;QAE7B,IAAM,IAAI,GAAG,OAAO,CAAC,OAAO,KAAA,QAAP,OAAO,KAAA,KAAA,IAAA,KAAA,IAAP,OAAO,CAAE,IAAI,CAAC,CAAC;QACpC,IAAI,IAAI,EAAE;YACR,OAAO,wQAAI,mBAAgB,EAAE,CAAC;SAC/B;QAED,IAAM,iBAAiB,GAAG,OAAO,IAAI,yRAAA,AAAc,EAAC,OAAO,CAAC,CAAC;QAE7D,IACE,aAAa,CAAC,iBAAiB,CAAC,gRAChC,qBAAA,AAAkB,EAAC,iBAAiB,CAAC,EACrC;YACA,OAAO,wQAAI,mBAAgB,CAAC,iBAAiB,CAAC,CAAC;SAChD,MAAM;YACL,OAAO,wQAAI,mBAAgB,EAAE,CAAC;SAC/B;IACH,CAAC;IAiBD,WAAA,SAAA,CAAA,eAAe,GAAf,SACE,IAAY,EACZ,IAAsB,EACtB,IAAkB,EAClB,IAAQ;QAER,IAAI,IAA6B,CAAC;QAClC,IAAI,GAAwB,CAAC;QAC7B,IAAI,EAAK,CAAC;QAEV,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACxB,OAAO;SACR,MAAM,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,EAAE,GAAG,IAAS,CAAC;SAChB,MAAM,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YACjC,IAAI,GAAG,IAA+B,CAAC;YACvC,EAAE,GAAG,IAAS,CAAC;SAChB,MAAM;YACL,IAAI,GAAG,IAA+B,CAAC;YACvC,GAAG,GAAG,IAA2B,CAAC;YAClC,EAAE,GAAG,IAAS,CAAC;SAChB;QAED,IAAM,aAAa,GAAG,GAAG,KAAA,QAAH,GAAG,KAAA,KAAA,IAAH,GAAG,GAAI,UAAU,CAAC,MAAM,EAAE,CAAC;QACjD,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;QACvD,IAAM,kBAAkB,2QAAG,UAAA,AAAO,EAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAExD,OAAO,UAAU,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAClE,CAAC;IACH,OAAA,UAAC;AAAD,CAAC,AApED,IAoEC;;AAED,SAAS,aAAa,CAAC,WAAgB;IACrC,OAAO,AACL,OAAO,WAAW,KAAK,QAAQ,IAC/B,OAAO,WAAW,CAAC,QAAQ,CAAC,KAAK,QAAQ,IACzC,OAAO,WAAW,CAAC,SAAS,CAAC,KAAK,QAAQ,IAC1C,OAAO,WAAW,CAAC,YAAY,CAAC,KAAK,QAAQ,CAC9C,CAAC;AACJ,CAAC"}},
    {"offset": {"line": 1377, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;;AAM1C,IAAM,WAAW,GAAG,kQAAI,aAAU,EAAE,CAAC;AAErC;;GAEG,CACH,IAAA,cAAA;IAIE,SAAA,YACU,SAA0B,EAClB,IAAY,EACZ,OAAgB,EAChB,OAAuB;QAH/B,IAAA,CAAA,SAAS,GAAT,SAAS,CAAiB;QAClB,IAAA,CAAA,IAAI,GAAJ,IAAI,CAAQ;QACZ,IAAA,CAAA,OAAO,GAAP,OAAO,CAAS;QAChB,IAAA,CAAA,OAAO,GAAP,OAAO,CAAgB;IACtC,CAAC;IAEJ,YAAA,SAAA,CAAA,SAAS,GAAT,SAAU,IAAY,EAAE,OAAqB,EAAE,OAAiB;QAC9D,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAC;IAED,YAAA,SAAA,CAAA,eAAe,GAAf,SACE,KAAa,EACb,QAAyB,EACzB,QAAsB,EACtB,GAAO;QAEP,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QACjC,OAAO,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG,CACK,YAAA,SAAA,CAAA,UAAU,GAAlB;QACE,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;QAED,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAC7C,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CACb,CAAC;QAEF,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,WAAW,CAAC;SACpB;QAED,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACH,OAAA,WAAC;AAAD,CAAC,AA/CD,IA+CC"}},
    {"offset": {"line": 1435, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/NoopTracerProvider.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NoopTracer } from './NoopTracer';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\nimport { TracerProvider } from './tracer_provider';\n\n/**\n * An implementation of the {@link TracerProvider} which returns an impotent\n * Tracer for all calls to `getTracer`.\n *\n * All operations are no-op.\n */\nexport class NoopTracerProvider implements TracerProvider {\n  getTracer(\n    _name?: string,\n    _version?: string,\n    _options?: TracerOptions\n  ): Tracer {\n    return new NoopTracer();\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;;AAK1C;;;;;GAKG,CACH,IAAA,qBAAA;IAAA,SAAA,sBAQA,CAAC;IAPC,mBAAA,SAAA,CAAA,SAAS,GAAT,SACE,KAAc,EACd,QAAiB,EACjB,QAAwB;QAExB,OAAO,kQAAI,aAAU,EAAE,CAAC;IAC1B,CAAC;IACH,OAAA,kBAAC;AAAD,CAAC,AARD,IAQC"}},
    {"offset": {"line": 1472, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/ProxyTracerProvider.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Tracer } from './tracer';\nimport { TracerProvider } from './tracer_provider';\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nexport class ProxyTracerProvider implements TracerProvider {\n  private _delegate?: TracerProvider;\n\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  getTracer(name: string, version?: string, options?: TracerOptions): Tracer {\n    return (\n      this.getDelegateTracer(name, version, options) ??\n      new ProxyTracer(this, name, version, options)\n    );\n  }\n\n  getDelegate(): TracerProvider {\n    return this._delegate ?? NOOP_TRACER_PROVIDER;\n  }\n\n  /**\n   * Set the delegate tracer provider\n   */\n  setDelegate(delegate: TracerProvider) {\n    this._delegate = delegate;\n  }\n\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined {\n    return this._delegate?.getTracer(name, version, options);\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAIH,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;;;AAG1D,IAAM,oBAAoB,GAAG,0QAAI,qBAAkB,EAAE,CAAC;AAEtD;;;;;;;GAOG,CACH,IAAA,sBAAA;IAAA,SAAA,uBA+BA,CAAC;IA5BC;;OAEG,CACH,oBAAA,SAAA,CAAA,SAAS,GAAT,SAAU,IAAY,EAAE,OAAgB,EAAE,OAAuB;;QAC/D,OAAO,AACL,CAAA,KAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,MAAA,QAAA,OAAA,KAAA,IAAA,KAC9C,mQAAI,cAAW,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAC9C,CAAC;IACJ,CAAC;IAED,oBAAA,SAAA,CAAA,WAAW,GAAX;;QACE,OAAO,CAAA,KAAA,IAAI,CAAC,SAAS,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,oBAAoB,CAAC;IAChD,CAAC;IAED;;OAEG,CACH,oBAAA,SAAA,CAAA,WAAW,GAAX,SAAY,QAAwB;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAED,oBAAA,SAAA,CAAA,iBAAiB,GAAjB,SACE,IAAY,EACZ,OAAgB,EAChB,OAAuB;;QAEvB,OAAO,CAAA,KAAA,IAAI,CAAC,SAAS,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,SAAS,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IACH,OAAA,mBAAC;AAAD,CAAC,AA/BD,IA+BC"}},
    {"offset": {"line": 1530, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/trace.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EACL,SAAS,EACT,cAAc,EACd,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACnE,OAAO,EACL,kBAAkB,EAClB,eAAe,GAChB,MAAM,4BAA4B,CAAC;AAGpC,OAAO,EACL,UAAU,EACV,aAAa,EACb,OAAO,EACP,cAAc,EACd,OAAO,EACP,cAAc,GACf,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;;;;AAEjC,IAAM,QAAQ,GAAG,OAAO,CAAC;AAEzB;;GAEG,CACH,IAAA,WAAA;IAKE,6FAAA,EAA+F,CAC/F,SAAA;QAHQ,IAAA,CAAA,oBAAoB,GAAG,2QAAI,sBAAmB,EAAE,CAAC;QAmDlD,IAAA,CAAA,eAAe,2QAAG,kBAAe,CAAC;QAElC,IAAA,CAAA,kBAAkB,GAAG,6RAAkB,CAAC;QAExC,IAAA,CAAA,UAAU,uQAAG,aAAU,CAAC;QAExB,IAAA,CAAA,OAAO,uQAAG,UAAO,CAAC;QAElB,IAAA,CAAA,aAAa,uQAAG,gBAAa,CAAC;QAE9B,IAAA,CAAA,cAAc,GAAG,qRAAc,CAAC;QAEhC,IAAA,CAAA,OAAO,uQAAG,UAAO,CAAC;QAElB,IAAA,CAAA,cAAc,uQAAG,iBAAc,CAAC;IA9DhB,CAAC;IAExB,gDAAA,EAAkD,CACpC,SAAA,WAAW,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,QAAQ,EAAE,CAAC;SACjC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;OAIG,CACI,SAAA,SAAA,CAAA,uBAAuB,GAA9B,SAA+B,QAAwB;QACrD,IAAM,OAAO,GAAG,2RAAA,AAAc,EAC5B,QAAQ,EACR,IAAI,CAAC,oBAAoB,wPACzB,UAAO,CAAC,QAAQ,EAAE,CACnB,CAAC;QACF,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;SACjD;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG,CACI,SAAA,SAAA,CAAA,iBAAiB,GAAxB;QACE,iRAAO,YAAA,AAAS,EAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,oBAAoB,CAAC;IAC1D,CAAC;IAED;;OAEG,CACI,SAAA,SAAA,CAAA,SAAS,GAAhB,SAAiB,IAAY,EAAE,OAAgB;QAC7C,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,sCAAA,EAAwC,CACjC,SAAA,SAAA,CAAA,OAAO,GAAd;kRACE,mBAAA,AAAgB,EAAC,QAAQ,wPAAE,UAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,oBAAoB,GAAG,2QAAI,sBAAmB,EAAE,CAAC;IACxD,CAAC;IAiBH,OAAA,QAAC;AAAD,CAAC,AArED,IAqEC"}},
    {"offset": {"line": 1611, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace-api.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { TraceAPI } from './api/trace';\n/** Entrypoint for trace API */\nexport const trace = TraceAPI.getInstance();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,sEAAsE;AACtE,qCAAqC;;;;AACrC,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;;AAEhC,IAAM,KAAK,0PAAG,WAAQ,CAAC,WAAW,EAAE,CAAC"}},
    {"offset": {"line": 1637, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/span_kind.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport enum SpanKind {\n  /** Default value. Indicates that the span is used internally. */\n  INTERNAL = 0,\n\n  /**\n   * Indicates that the span covers server-side handling of an RPC or other\n   * remote request.\n   */\n  SERVER = 1,\n\n  /**\n   * Indicates that the span covers the client-side wrapper around an RPC or\n   * other remote request.\n   */\n  CLIENT = 2,\n\n  /**\n   * Indicates that the span describes producer sending a message to a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  PRODUCER = 3,\n\n  /**\n   * Indicates that the span describes consumer receiving a message from a\n   * broker. Unlike client and server, there is no direct critical path latency\n   * relationship between producer and consumer spans.\n   */\n  CONSUMER = 4,\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AACH,IAAY,QA6BX;AA7BD,CAAA,SAAY,QAAQ;IAClB,+DAAA,EAAiE,CACjE,QAAA,CAAA,QAAA,CAAA,WAAA,GAAA,EAAA,GAAA,UAAY,CAAA;IAEZ;;;OAGG,CACH,QAAA,CAAA,QAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IAEV;;;OAGG,CACH,QAAA,CAAA,QAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAU,CAAA;IAEV;;;;OAIG,CACH,QAAA,CAAA,QAAA,CAAA,WAAA,GAAA,EAAA,GAAA,UAAY,CAAA;IAEZ;;;;OAIG,CACH,QAAA,CAAA,QAAA,CAAA,WAAA,GAAA,EAAA,GAAA,UAAY,CAAA;AACd,CAAC,EA7BW,QAAQ,IAAA,CAAR,QAAQ,GAAA,CAAA,CAAA,GA6BnB"}},
    {"offset": {"line": 1680, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/SamplingResult.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanAttributes } from './attributes';\nimport { TraceState } from './trace_state';\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * @deprecated use the one declared in @opentelemetry/sdk-trace-base instead.\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAKH;;;;GAIG;;;AACH,IAAY,gBAgBX;AAhBD,CAAA,SAAY,gBAAgB;IAC1B;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,aAAA,GAAA,EAAA,GAAA,YAAU,CAAA;IACV;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAM,CAAA;IACN;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,qBAAA,GAAA,EAAA,GAAA,oBAAkB,CAAA;AACpB,CAAC,EAhBW,gBAAgB,IAAA,CAAhB,gBAAgB,GAAA,CAAA,CAAA,GAgB3B"}},
    {"offset": {"line": 1720, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/diag-api.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { DiagAPI } from './api/diag';\n/**\n * Entrypoint for Diag API.\n * Defines Diagnostic handler used for internal diagnostic logging operations.\n * The default provides a Noop DiagLogger implementation which may be changed via the\n * diag.setLogger(logger: DiagLogger) function.\n */\nexport const diag = DiagAPI.instance();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,sEAAsE;AACtE,qCAAqC;;;;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;;AAO9B,IAAM,IAAI,yPAAG,UAAO,CAAC,QAAQ,EAAE,CAAC"}},
    {"offset": {"line": 1746, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIH,IAAA,cAAA;IAGE,SAAA,YAAY,OAAmC;QAC7C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC;IACzD,CAAC;IAED,YAAA,SAAA,CAAA,QAAQ,GAAR,SAAS,GAAW;QAClB,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,SAAS,CAAC;SAClB;QAED,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,CAAE,EAAE,KAAK,CAAC,CAAC;IAClC,CAAC;IAED,YAAA,SAAA,CAAA,aAAa,GAAb;QACE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,SAAC,EAAM;gBAAN,KAAA,OAAA,IAAA,EAAM,EAAL,CAAC,GAAA,EAAA,CAAA,EAAA,EAAE,CAAC,GAAA,EAAA,CAAA,EAAA;YAAM,OAAA;gBAAC,CAAC;gBAAE,CAAC;aAAC;QAAN,CAAM,CAAC,CAAC;IACrE,CAAC;IAED,YAAA,SAAA,CAAA,QAAQ,GAAR,SAAS,GAAW,EAAE,KAAmB;QACvC,IAAM,UAAU,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACpC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,YAAA,SAAA,CAAA,WAAW,GAAX,SAAY,GAAW;QACrB,IAAM,UAAU,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClD,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAChC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,YAAA,SAAA,CAAA,aAAa,GAAb;;QAAc,IAAA,OAAA,EAAA,CAAiB;YAAjB,IAAA,KAAA,CAAiB,EAAjB,KAAA,UAAA,MAAiB,EAAjB,IAAiB,CAAA;YAAjB,IAAA,CAAA,GAAA,GAAA,SAAA,CAAA,GAAA,CAAiB;;QAC7B,IAAM,UAAU,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;YAClD,IAAkB,IAAA,SAAA,SAAA,IAAI,CAAA,EAAA,WAAA,OAAA,IAAA,EAAA,EAAA,CAAA,SAAA,IAAA,EAAA,WAAA,OAAA,IAAA,GAAE;gBAAnB,IAAM,GAAG,GAAA,SAAA,KAAA;gBACZ,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjC;;;;;;;;;;;;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,YAAA,SAAA,CAAA,KAAK,GAAL;QACE,OAAO,IAAI,WAAW,EAAE,CAAC;IAC3B,CAAC;IACH,OAAA,WAAC;AAAD,CAAC,AA3CD,IA2CC"}},
    {"offset": {"line": 1862, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/internal/symbol.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Symbol used to make BaggageEntryMetadata an opaque type\n */\nexport const baggageEntryMetadataSymbol = Symbol('BaggageEntryMetadata');\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH;;GAEG;;;AACI,IAAM,0BAA0B,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC"}},
    {"offset": {"line": 1886, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/utils.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/utils.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nimport { Baggage, BaggageEntry, BaggageEntryMetadata } from './types';\n\nconst diag = DiagAPI.instance();\n\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(\n  entries: Record<string, BaggageEntry> = {}\n): Baggage {\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(\n  str: string\n): BaggageEntryMetadata {\n  if (typeof str !== 'string') {\n    diag.error(\n      `Cannot create baggage metadata from unknown type: ${typeof str}`\n    );\n    str = '';\n  }\n\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString() {\n      return str;\n    },\n  };\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,0BAA0B,EAAE,MAAM,mBAAmB,CAAC;;;;AAG/D,IAAM,IAAI,yPAAG,UAAO,CAAC,QAAQ,EAAE,CAAC;AAO1B,SAAU,aAAa,CAC3B,OAA0C;IAA1C,IAAA,YAAA,KAAA,GAAA;QAAA,UAAA,CAAA,CAA0C;IAAA;IAE1C,OAAO,qRAAI,cAAW,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3D,CAAC;AAQK,SAAU,8BAA8B,CAC5C,GAAW;IAEX,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAI,CAAC,KAAK,CACR,uDAAqD,OAAO,GAAK,CAClE,CAAC;QACF,GAAG,GAAG,EAAE,CAAC;KACV;IAED,OAAO;QACL,QAAQ,0QAAE,6BAA0B;QACpC,QAAQ,EAAA;YACN,OAAO,GAAG,CAAC;QACb,CAAC;KACF,CAAC;AACJ,CAAC"}},
    {"offset": {"line": 1933, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/propagation/NoopTextMapPropagator.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { TextMapPropagator } from './TextMapPropagator';\n\n/**\n * No-op implementations of {@link TextMapPropagator}.\n */\nexport class NoopTextMapPropagator implements TextMapPropagator {\n  /** Noop inject function does nothing */\n  inject(_context: Context, _carrier: unknown): void {}\n  /** Noop extract function does nothing and returns the input context */\n  extract(context: Context, _carrier: unknown): Context {\n    return context;\n  }\n  fields(): string[] {\n    return [];\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAKH;;GAEG;;;AACH,IAAA,wBAAA;IAAA,SAAA,yBAUA,CAAC;IATC,sCAAA,EAAwC,CACxC,sBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,QAAiB,EAAE,QAAiB,GAAS,CAAC;IACrD,qEAAA,EAAuE,CACvE,sBAAA,SAAA,CAAA,OAAO,GAAP,SAAQ,OAAgB,EAAE,QAAiB;QACzC,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,sBAAA,SAAA,CAAA,MAAM,GAAN;QACE,OAAO,EAAE,CAAC;IACZ,CAAC;IACH,OAAA,qBAAC;AAAD,CAAC,AAVD,IAUC"}},
    {"offset": {"line": 1969, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/propagation/TextMapPropagator.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\n\n/**\n * Injects `Context` into and extracts it from carriers that travel\n * in-band across process boundaries. Encoding is expected to conform to the\n * HTTP Header Field semantics. Values are often encoded as RPC/HTTP request\n * headers.\n *\n * The carrier of propagated data on both the client (injector) and server\n * (extractor) side is usually an object such as http headers. Propagation is\n * usually implemented via library-specific request interceptors, where the\n * client-side injects values and the server-side extracts them.\n */\nexport interface TextMapPropagator<Carrier = any> {\n  /**\n   * Injects values from a given `Context` into a carrier.\n   *\n   * OpenTelemetry defines a common set of format values (TextMapPropagator),\n   * and each has an expected `carrier` type.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param setter an optional {@link TextMapSetter}. If undefined, values will be\n   *     set by direct object assignment.\n   */\n  inject(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier>\n  ): void;\n\n  /**\n   * Given a `Context` and a carrier, extract context values from a\n   * carrier and return a new context, created from the old context, with the\n   * extracted values.\n   *\n   * @param context the Context from which to extract values to transmit over\n   *     the wire.\n   * @param carrier the carrier of propagation fields, such as http request\n   *     headers.\n   * @param getter an optional {@link TextMapGetter}. If undefined, keys will be all\n   *     own properties, and keys will be accessed by direct object access.\n   */\n  extract(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier>\n  ): Context;\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  fields(): string[];\n}\n\n/**\n * A setter is specified by the caller to define a specific method\n * to set key/value pairs on the carrier within a propagator.\n */\nexport interface TextMapSetter<Carrier = any> {\n  /**\n   * Callback used to set a key/value pair on an object.\n   *\n   * Should be called by the propagator each time a key/value pair\n   * should be set, and should set that key/value pair on the propagator.\n   *\n   * @param carrier object or class which carries key/value pairs\n   * @param key string key to modify\n   * @param value value to be set to the key on the carrier\n   */\n  set(carrier: Carrier, key: string, value: string): void;\n}\n\n/**\n * A getter is specified by the caller to define a specific method\n * to get the value of a key from a carrier.\n */\nexport interface TextMapGetter<Carrier = any> {\n  /**\n   * Get a list of all keys available on the carrier.\n   *\n   * @param carrier\n   */\n  keys(carrier: Carrier): string[];\n\n  /**\n   * Get the value of a specific key from the carrier.\n   *\n   * @param carrier\n   * @param key\n   */\n  get(carrier: Carrier, key: string): undefined | string | string[];\n}\n\nexport const defaultTextMapGetter: TextMapGetter = {\n  get(carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n\n  keys(carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  },\n};\n\nexport const defaultTextMapSetter: TextMapSetter = {\n  set(carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n\n    carrier[key] = value;\n  },\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAkGI,IAAM,oBAAoB,GAAkB;IACjD,GAAG,EAAA,SAAC,OAAO,EAAE,GAAG;QACd,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAED,IAAI,EAAA,SAAC,OAAO;QACV,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,OAAO,EAAE,CAAC;SACX;QACD,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;CACF,CAAC;AAEK,IAAM,oBAAoB,GAAkB;IACjD,GAAG,EAAA,SAAC,OAAO,EAAE,GAAG,EAAE,KAAK;QACrB,IAAI,OAAO,IAAI,IAAI,EAAE;YACnB,OAAO;SACR;QAED,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACvB,CAAC;CACF,CAAC"}},
    {"offset": {"line": 2013, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/baggage/context-helpers.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextAPI } from '../api/context';\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Baggage } from './types';\n\n/**\n * Baggage key\n */\nconst BAGGAGE_KEY = createContextKey('OpenTelemetry Baggage Key');\n\n/**\n * Retrieve the current baggage from the given context\n *\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getBaggage(context: Context): Baggage | undefined {\n  return (context.getValue(BAGGAGE_KEY) as Baggage) || undefined;\n}\n\n/**\n * Retrieve the current baggage from the active/current context\n *\n * @returns {Baggage} Extracted baggage from the context\n */\nexport function getActiveBaggage(): Baggage | undefined {\n  return getBaggage(ContextAPI.getInstance().active());\n}\n\n/**\n * Store a baggage in the given context\n *\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nexport function setBaggage(context: Context, baggage: Baggage): Context {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\n/**\n * Delete the baggage stored in the given context\n *\n * @param {Context} Context that manage all context values\n */\nexport function deleteBaggage(context: Context): Context {\n  return context.deleteValue(BAGGAGE_KEY);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;;;AAItD;;GAEG,CACH,IAAM,WAAW,oQAAG,mBAAA,AAAgB,EAAC,2BAA2B,CAAC,CAAC;AAQ5D,SAAU,UAAU,CAAC,OAAgB;IACzC,OAAQ,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAa,IAAI,SAAS,CAAC;AACjE,CAAC;AAOK,SAAU,gBAAgB;IAC9B,OAAO,UAAU,0PAAC,aAAU,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;AACvD,CAAC;AAQK,SAAU,UAAU,CAAC,OAAgB,EAAE,OAAgB;IAC3D,OAAO,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;AAChD,CAAC;AAOK,SAAU,aAAa,CAAC,OAAgB;IAC5C,OAAO,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;AAC1C,CAAC"}},
    {"offset": {"line": 2056, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/propagation.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/api/propagation.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAGH,OAAO,EACL,SAAS,EACT,cAAc,EACd,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EACL,oBAAoB,EACpB,oBAAoB,GAIrB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EACL,UAAU,EACV,gBAAgB,EAChB,UAAU,EACV,aAAa,GACd,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;;;;;AAEjC,IAAM,QAAQ,GAAG,aAAa,CAAC;AAC/B,IAAM,wBAAwB,GAAG,mRAAI,wBAAqB,EAAE,CAAC;AAE7D;;GAEG,CACH,IAAA,iBAAA;IAGE,6FAAA,EAA+F,CAC/F,SAAA;QA8DO,IAAA,CAAA,aAAa,8PAAG,gBAAa,CAAC;QAE9B,IAAA,CAAA,UAAU,2QAAG,aAAU,CAAC;QAExB,IAAA,CAAA,gBAAgB,2QAAG,mBAAgB,CAAC;QAEpC,IAAA,CAAA,UAAU,2QAAG,aAAU,CAAC;QAExB,IAAA,CAAA,aAAa,GAAG,wRAAa,CAAC;IAtEd,CAAC;IAExB,qDAAA,EAAuD,CACzC,eAAA,WAAW,GAAzB;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,cAAc,EAAE,CAAC;SACvC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;;;OAIG,CACI,eAAA,SAAA,CAAA,mBAAmB,GAA1B,SAA2B,UAA6B;QACtD,QAAO,0RAAA,AAAc,EAAC,QAAQ,EAAE,UAAU,wPAAE,UAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;OAMG,CACI,eAAA,SAAA,CAAA,MAAM,GAAb,SACE,OAAgB,EAChB,OAAgB,EAChB,MAAqD;QAArD,IAAA,WAAA,KAAA,GAAA;YAAA,SAAA,0QAAA,CAAA,uBAAqD;QAAA;QAErD,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;OAMG,CACI,eAAA,SAAA,CAAA,OAAO,GAAd,SACE,OAAgB,EAChB,OAAgB,EAChB,MAAqD;QAArD,IAAA,WAAA,KAAA,GAAA;YAAA,SAAA,0QAAA,CAAA,uBAAqD;QAAA;QAErD,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG,CACI,eAAA,SAAA,CAAA,MAAM,GAAb;QACE,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,CAAC;IAC9C,CAAC;IAED,iCAAA,EAAmC,CAC5B,eAAA,SAAA,CAAA,OAAO,GAAd;kRACE,mBAAA,AAAgB,EAAC,QAAQ,wPAAE,UAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACjD,CAAC;IAYO,eAAA,SAAA,CAAA,oBAAoB,GAA5B;QACE,iRAAO,YAAA,AAAS,EAAC,QAAQ,CAAC,IAAI,wBAAwB,CAAC;IACzD,CAAC;IACH,OAAA,cAAC;AAAD,CAAC,AA/ED,IA+EC"}},
    {"offset": {"line": 2153, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation-api.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/propagation-api.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Split module-level variable definition into separate files to allow\n// tree-shaking on each api instance.\nimport { PropagationAPI } from './api/propagation';\n/** Entrypoint for propagation API */\nexport const propagation = PropagationAPI.getInstance();\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,sEAAsE;AACtE,qCAAqC;;;;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;;AAE5C,IAAM,WAAW,gQAAG,iBAAc,CAAC,WAAW,EAAE,CAAC"}},
    {"offset": {"line": 2179, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/src/trace/status.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport interface SpanStatus {\n  /** The status code of this message. */\n  code: SpanStatusCode;\n  /** A developer-facing error message. */\n  message?: string;\n}\n\n/**\n * An enumeration of status codes.\n */\nexport enum SpanStatusCode {\n  /**\n   * The default status.\n   */\n  UNSET = 0,\n  /**\n   * The operation has been validated by an Application developer or\n   * Operator to have completed successfully.\n   */\n  OK = 1,\n  /**\n   * The operation contains an error.\n   */\n  ERROR = 2,\n}\n"],"names":[],"mappings":"AAsBA;;GAEG;;;AACH,IAAY,cAcX;AAdD,CAAA,SAAY,cAAc;IACxB;;OAEG,CACH,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;IACT;;;OAGG,CACH,cAAA,CAAA,cAAA,CAAA,KAAA,GAAA,EAAA,GAAA,IAAM,CAAA;IACN;;OAEG,CACH,cAAA,CAAA,cAAA,CAAA,QAAA,GAAA,EAAA,GAAA,OAAS,CAAA;AACX,CAAC,EAdW,cAAc,IAAA,CAAd,cAAc,GAAA,CAAA,CAAA,GAczB"}},
    {"offset": {"line": 2201, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/version.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/version.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.30.1';\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAEH,4DAA4D;;;;AACrD,IAAM,OAAO,GAAG,QAAQ,CAAC"}},
    {"offset": {"line": 2224, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/browser/sdk-info.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/browser/sdk-info.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SEMRESATTRS_TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'browser',\n  [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]: TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  [SEMRESATTRS_TELEMETRY_SDK_VERSION]: VERSION,\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,EACL,8BAA8B,EAC9B,gCAAgC,EAChC,kCAAkC,EAClC,gCAAgC,EAChC,iCAAiC,GAClC,MAAM,qCAAqC,CAAC;;;;AAGtC,IAAM,QAAQ,GAAA,CAAA,KAAA,CAAA,GACnB,EAAA,2TAAC,iCAA8B,CAAA,GAAG,eAAe,EACjD,EAAA,CAAC,6VAAgC,CAAA,GAAG,SAAS,EAC7C,EAAA,2TAAC,qCAAkC,CAAA,6TAAG,mCAAgC,EACtE,EAAA,2TAAC,oCAAiC,CAAA,gSAAG,UAAO,KAC7C,CAAC"}},
    {"offset": {"line": 2251, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/internal/validators.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/internal/validators.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;AAEH,IAAM,oBAAoB,GAAG,cAAc,CAAC;AAC5C,IAAM,SAAS,GAAG,UAAQ,oBAAoB,GAAA,SAAS,CAAC;AACxD,IAAM,gBAAgB,GAAG,aAAW,oBAAoB,GAAA,kBAAgB,oBAAoB,GAAA,QAAQ,CAAC;AACrG,IAAM,eAAe,GAAG,IAAI,MAAM,CAAC,SAAO,SAAS,GAAA,MAAI,gBAAgB,GAAA,IAAI,CAAC,CAAC;AAC7E,IAAM,sBAAsB,GAAG,qBAAqB,CAAC;AACrD,IAAM,+BAA+B,GAAG,KAAK,CAAC;AAUxC,SAAU,WAAW,CAAC,GAAW;IACrC,OAAO,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC;AAMK,SAAU,aAAa,CAAC,KAAa;IACzC,OAAO,AACL,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,IAClC,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAC7C,CAAC;AACJ,CAAC"}},
    {"offset": {"line": 2285, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2385, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;AAEH,OAAO,EAAW,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;;AAE/D,IAAM,oBAAoB,oQAAG,mBAAA,AAAgB,EAC3C,gDAAgD,CACjD,CAAC;AAEI,SAAU,eAAe,CAAC,OAAgB;IAC9C,OAAO,OAAO,CAAC,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC,CAAC;AACtD,CAAC;AAEK,SAAU,iBAAiB,CAAC,OAAgB;IAChD,OAAO,OAAO,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;AACnD,CAAC;AAEK,SAAU,mBAAmB,CAAC,OAAgB;IAClD,OAAO,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,IAAI,CAAC;AACzD,CAAC"}},
    {"offset": {"line": 2420, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/constants.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;AAEI,IAAM,0BAA0B,GAAG,GAAG,CAAC;AACvC,IAAM,4BAA4B,GAAG,GAAG,CAAC;AACzC,IAAM,uBAAuB,GAAG,GAAG,CAAC;AAGpC,IAAM,cAAc,GAAG,SAAS,CAAC;AAEjC,IAAM,4BAA4B,GAAG,GAAG,CAAC;AAEzC,IAAM,gCAAgC,GAAG,IAAI,CAAC;AAE9C,IAAM,wBAAwB,GAAG,IAAI,CAAC"}},
    {"offset": {"line": 2454, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/utils.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2550, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+core@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,OAAO,EAGL,WAAW,GAIZ,MAAM,oBAAoB,CAAC;AAE5B,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACnE,OAAO,EACL,cAAc,EACd,uBAAuB,EACvB,4BAA4B,EAC5B,gCAAgC,GACjC,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,WAAW,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;;;;;AAE7E;;;;;GAKG,CACH,IAAA,uBAAA;IAAA,SAAA,wBA6CA,CAAC;IA5CC,qBAAA,SAAA,CAAA,MAAM,GAAN,SAAO,OAAgB,EAAE,OAAgB,EAAE,MAAqB;QAC9D,IAAM,OAAO,gQAAG,cAAW,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,0TAAI,sBAAA,AAAmB,EAAC,OAAO,CAAC,EAAE,OAAO;QACrD,IAAM,QAAQ,GAAG,wTAAA,AAAW,EAAC,OAAO,CAAC,CAClC,MAAM,CAAC,SAAC,IAAY;YACnB,OAAO,IAAI,CAAC,MAAM,6SAAI,oCAAgC,CAAC;QACzD,CAAC,CAAC,CACD,KAAK,CAAC,CAAC,4SAAE,+BAA4B,CAAC,CAAC;QAC1C,IAAM,WAAW,GAAG,8TAAA,AAAiB,EAAC,QAAQ,CAAC,CAAC;QAChD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAM,CAAC,GAAG,CAAC,OAAO,4SAAE,iBAAc,EAAE,WAAW,CAAC,CAAC;SAClD;IACH,CAAC;IAED,qBAAA,SAAA,CAAA,OAAO,GAAP,SAAQ,OAAgB,EAAE,OAAgB,EAAE,MAAqB;QAC/D,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,4SAAE,iBAAc,CAAC,CAAC;QACxD,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,GAC5C,WAAW,CAAC,IAAI,2SAAC,0BAAuB,CAAC,GACzC,WAAW,CAAC;QAChB,IAAI,CAAC,aAAa,EAAE,OAAO,OAAO,CAAC;QACnC,IAAM,OAAO,GAAiC,CAAA,CAAE,CAAC;QACjD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAO,OAAO,CAAC;SAChB;QACD,IAAM,KAAK,GAAG,aAAa,CAAC,KAAK,2SAAC,0BAAuB,CAAC,CAAC;QAC3D,KAAK,CAAC,OAAO,CAAC,SAAA,KAAK;YACjB,IAAM,OAAO,6SAAG,oBAAA,AAAiB,EAAC,KAAK,CAAC,CAAC;YACzC,IAAI,OAAO,EAAE;gBACX,IAAM,YAAY,GAAiB;oBAAE,KAAK,EAAE,OAAO,CAAC,KAAK;gBAAA,CAAE,CAAC;gBAC5D,IAAI,OAAO,CAAC,QAAQ,EAAE;oBACpB,YAAY,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;iBAC1C;gBACD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,OAAO,OAAO,CAAC;SAChB;QACD,oQAAO,cAAW,CAAC,UAAU,CAAC,OAAO,+PAAE,cAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,qBAAA,SAAA,CAAA,MAAM,GAAN;QACE,OAAO;sTAAC,iBAAc;SAAC,CAAC;IAC1B,CAAC;IACH,OAAA,oBAAC;AAAD,CAAC,AA7CD,IA6CC"}},
    {"offset": {"line": 2632, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/platform/browser/default-service-name.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/browser/default-service-name.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return 'unknown_service';\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;AAEG,SAAU,kBAAkB;IAChC,OAAO,iBAAiB,CAAC;AAC3B,CAAC"}},
    {"offset": {"line": 2656, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/Resource.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+resources@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/Resource.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2943, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","sources":["turbopack:///[project]/node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.30.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Sampler.ts"],"sourceRoot":"","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG,CAUH;;;GAGG;;;AACH,IAAY,gBAgBX;AAhBD,CAAA,SAAY,gBAAgB;IAC1B;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,aAAA,GAAA,EAAA,GAAA,YAAU,CAAA;IACV;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,SAAA,GAAA,EAAA,GAAA,QAAM,CAAA;IACN;;;OAGG,CACH,gBAAA,CAAA,gBAAA,CAAA,qBAAA,GAAA,EAAA,GAAA,oBAAkB,CAAA;AACpB,CAAC,EAhBW,gBAAgB,IAAA,CAAhB,gBAAgB,GAAA,CAAA,CAAA,GAgB3B"}},
    {"offset": {"line": 2984, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@swc+helpers@0.5.15/node_modules/@swc/helpers/cjs/_interop_require_default.cjs"],"sourcesContent":["\"use strict\";\n\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\nexports._ = _interop_require_default;\n"],"names":[],"mappings":"AAEA,SAAS,yBAAyB,GAAG;IACjC,OAAO,OAAO,IAAI,UAAU,GAAG,MAAM;QAAE,SAAS;IAAI;AACxD;AACA,QAAQ,CAAC,GAAG","ignoreList":[0]}},
    {"offset": {"line": 2996, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.4.1_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-dom@19.1.0_react@19.1.0/node_modules/next/src/shared/lib/modern-browserslist-target.js"],"sourcesContent":["// Note: This file is JS because it's used by the taskfile-swc.js file, which is JS.\n// Keep file changes in sync with the corresponding `.d.ts` files.\n/**\n * These are the browser versions that support all of the following:\n * static import: https://caniuse.com/es6-module\n * dynamic import: https://caniuse.com/es6-module-dynamic-import\n * import.meta: https://caniuse.com/mdn-javascript_operators_import_meta\n */\nconst MODERN_BROWSERSLIST_TARGET = [\n  'chrome 64',\n  'edge 79',\n  'firefox 67',\n  'opera 51',\n  'safari 12',\n]\n\nmodule.exports = MODERN_BROWSERSLIST_TARGET\n"],"names":["MODERN_BROWSERSLIST_TARGET","module","exports"],"mappings":"AAAA,oFAAoF;AACpF,kEAAkE;AAClE;;;;;CAKC,GACD,MAAMA,6BAA6B;IACjC;IACA;IACA;IACA;IACA;CACD;AAEDC,OAAOC,OAAO,GAAGF","ignoreList":[0]}},
    {"offset": {"line": 3017, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.4.1_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-dom@19.1.0_react@19.1.0/node_modules/next/src/shared/lib/constants.ts"],"sourcesContent":["import MODERN_BROWSERSLIST_TARGET from './modern-browserslist-target'\n\nexport { MODERN_BROWSERSLIST_TARGET }\n\nexport type ValueOf<T> = Required<T>[keyof T]\n\nexport const COMPILER_NAMES = {\n  client: 'client',\n  server: 'server',\n  edgeServer: 'edge-server',\n} as const\n\nexport type CompilerNameValues = ValueOf<typeof COMPILER_NAMES>\n\nexport const COMPILER_INDEXES: {\n  [compilerKey in CompilerNameValues]: number\n} = {\n  [COMPILER_NAMES.client]: 0,\n  [COMPILER_NAMES.server]: 1,\n  [COMPILER_NAMES.edgeServer]: 2,\n} as const\n\nexport const UNDERSCORE_NOT_FOUND_ROUTE = '/_not-found'\nexport const UNDERSCORE_NOT_FOUND_ROUTE_ENTRY = `${UNDERSCORE_NOT_FOUND_ROUTE}/page`\nexport const PHASE_EXPORT = 'phase-export'\nexport const PHASE_PRODUCTION_BUILD = 'phase-production-build'\nexport const PHASE_PRODUCTION_SERVER = 'phase-production-server'\nexport const PHASE_DEVELOPMENT_SERVER = 'phase-development-server'\nexport const PHASE_TEST = 'phase-test'\nexport const PHASE_INFO = 'phase-info'\nexport const PAGES_MANIFEST = 'pages-manifest.json'\nexport const WEBPACK_STATS = 'webpack-stats.json'\nexport const APP_PATHS_MANIFEST = 'app-paths-manifest.json'\nexport const APP_PATH_ROUTES_MANIFEST = 'app-path-routes-manifest.json'\nexport const BUILD_MANIFEST = 'build-manifest.json'\nexport const APP_BUILD_MANIFEST = 'app-build-manifest.json'\nexport const FUNCTIONS_CONFIG_MANIFEST = 'functions-config-manifest.json'\nexport const SUBRESOURCE_INTEGRITY_MANIFEST = 'subresource-integrity-manifest'\nexport const NEXT_FONT_MANIFEST = 'next-font-manifest'\nexport const EXPORT_MARKER = 'export-marker.json'\nexport const EXPORT_DETAIL = 'export-detail.json'\nexport const PRERENDER_MANIFEST = 'prerender-manifest.json'\nexport const ROUTES_MANIFEST = 'routes-manifest.json'\nexport const IMAGES_MANIFEST = 'images-manifest.json'\nexport const SERVER_FILES_MANIFEST = 'required-server-files.json'\nexport const DEV_CLIENT_PAGES_MANIFEST = '_devPagesManifest.json'\nexport const MIDDLEWARE_MANIFEST = 'middleware-manifest.json'\nexport const TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST =\n  '_clientMiddlewareManifest.json'\nexport const DEV_CLIENT_MIDDLEWARE_MANIFEST = '_devMiddlewareManifest.json'\nexport const REACT_LOADABLE_MANIFEST = 'react-loadable-manifest.json'\nexport const SERVER_DIRECTORY = 'server'\nexport const CONFIG_FILES = [\n  'next.config.js',\n  'next.config.mjs',\n  'next.config.ts',\n]\nexport const BUILD_ID_FILE = 'BUILD_ID'\nexport const BLOCKED_PAGES = ['/_document', '/_app', '/_error']\nexport const CLIENT_PUBLIC_FILES_PATH = 'public'\nexport const CLIENT_STATIC_FILES_PATH = 'static'\nexport const STRING_LITERAL_DROP_BUNDLE = '__NEXT_DROP_CLIENT_FILE__'\nexport const NEXT_BUILTIN_DOCUMENT = '__NEXT_BUILTIN_DOCUMENT__'\nexport const BARREL_OPTIMIZATION_PREFIX = '__barrel_optimize__'\n\n// server/[entry]/page_client-reference-manifest.js\nexport const CLIENT_REFERENCE_MANIFEST = 'client-reference-manifest'\n// server/server-reference-manifest\nexport const SERVER_REFERENCE_MANIFEST = 'server-reference-manifest'\n// server/middleware-build-manifest.js\nexport const MIDDLEWARE_BUILD_MANIFEST = 'middleware-build-manifest'\n// server/middleware-react-loadable-manifest.js\nexport const MIDDLEWARE_REACT_LOADABLE_MANIFEST =\n  'middleware-react-loadable-manifest'\n// server/interception-route-rewrite-manifest.js\nexport const INTERCEPTION_ROUTE_REWRITE_MANIFEST =\n  'interception-route-rewrite-manifest'\n// server/dynamic-css-manifest.js\nexport const DYNAMIC_CSS_MANIFEST = 'dynamic-css-manifest'\n\n// static/runtime/main.js\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN = `main`\nexport const CLIENT_STATIC_FILES_RUNTIME_MAIN_APP = `${CLIENT_STATIC_FILES_RUNTIME_MAIN}-app`\n// next internal client components chunk for layouts\nexport const APP_CLIENT_INTERNALS = 'app-pages-internals'\n// static/runtime/react-refresh.js\nexport const CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH = `react-refresh`\n// static/runtime/amp.js\nexport const CLIENT_STATIC_FILES_RUNTIME_AMP = `amp`\n// static/runtime/webpack.js\nexport const CLIENT_STATIC_FILES_RUNTIME_WEBPACK = `webpack`\n// static/runtime/polyfills.js\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS = 'polyfills'\nexport const CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL = Symbol(\n  CLIENT_STATIC_FILES_RUNTIME_POLYFILLS\n)\nexport const DEFAULT_RUNTIME_WEBPACK = 'webpack-runtime'\nexport const EDGE_RUNTIME_WEBPACK = 'edge-runtime-webpack'\nexport const STATIC_PROPS_ID = '__N_SSG'\nexport const SERVER_PROPS_ID = '__N_SSP'\nexport const DEFAULT_SERIF_FONT = {\n  name: 'Times New Roman',\n  xAvgCharWidth: 821,\n  azAvgWidth: 854.3953488372093,\n  unitsPerEm: 2048,\n}\nexport const DEFAULT_SANS_SERIF_FONT = {\n  name: 'Arial',\n  xAvgCharWidth: 904,\n  azAvgWidth: 934.5116279069767,\n  unitsPerEm: 2048,\n}\nexport const STATIC_STATUS_PAGES = ['/500']\nexport const TRACE_OUTPUT_VERSION = 1\n// in `MB`\nexport const TURBO_TRACE_DEFAULT_MEMORY_LIMIT = 6000\n\nexport const RSC_MODULE_TYPES = {\n  client: 'client',\n  server: 'server',\n} as const\n\n// comparing\n// https://nextjs.org/docs/api-reference/edge-runtime\n// with\n// https://nodejs.org/docs/latest/api/globals.html\nexport const EDGE_UNSUPPORTED_NODE_APIS = [\n  'clearImmediate',\n  'setImmediate',\n  'BroadcastChannel',\n  'ByteLengthQueuingStrategy',\n  'CompressionStream',\n  'CountQueuingStrategy',\n  'DecompressionStream',\n  'DomException',\n  'MessageChannel',\n  'MessageEvent',\n  'MessagePort',\n  'ReadableByteStreamController',\n  'ReadableStreamBYOBRequest',\n  'ReadableStreamDefaultController',\n  'TransformStreamDefaultController',\n  'WritableStreamDefaultController',\n]\n\nexport const SYSTEM_ENTRYPOINTS = new Set<string>([\n  CLIENT_STATIC_FILES_RUNTIME_MAIN,\n  CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n  CLIENT_STATIC_FILES_RUNTIME_AMP,\n  CLIENT_STATIC_FILES_RUNTIME_MAIN_APP,\n])\n"],"names":["APP_BUILD_MANIFEST","APP_CLIENT_INTERNALS","APP_PATHS_MANIFEST","APP_PATH_ROUTES_MANIFEST","BARREL_OPTIMIZATION_PREFIX","BLOCKED_PAGES","BUILD_ID_FILE","BUILD_MANIFEST","CLIENT_PUBLIC_FILES_PATH","CLIENT_REFERENCE_MANIFEST","CLIENT_STATIC_FILES_PATH","CLIENT_STATIC_FILES_RUNTIME_AMP","CLIENT_STATIC_FILES_RUNTIME_MAIN","CLIENT_STATIC_FILES_RUNTIME_MAIN_APP","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL","CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH","CLIENT_STATIC_FILES_RUNTIME_WEBPACK","COMPILER_INDEXES","COMPILER_NAMES","CONFIG_FILES","DEFAULT_RUNTIME_WEBPACK","DEFAULT_SANS_SERIF_FONT","DEFAULT_SERIF_FONT","DEV_CLIENT_MIDDLEWARE_MANIFEST","DEV_CLIENT_PAGES_MANIFEST","DYNAMIC_CSS_MANIFEST","EDGE_RUNTIME_WEBPACK","EDGE_UNSUPPORTED_NODE_APIS","EXPORT_DETAIL","EXPORT_MARKER","FUNCTIONS_CONFIG_MANIFEST","IMAGES_MANIFEST","INTERCEPTION_ROUTE_REWRITE_MANIFEST","MIDDLEWARE_BUILD_MANIFEST","MIDDLEWARE_MANIFEST","MIDDLEWARE_REACT_LOADABLE_MANIFEST","MODERN_BROWSERSLIST_TARGET","NEXT_BUILTIN_DOCUMENT","NEXT_FONT_MANIFEST","PAGES_MANIFEST","PHASE_DEVELOPMENT_SERVER","PHASE_EXPORT","PHASE_INFO","PHASE_PRODUCTION_BUILD","PHASE_PRODUCTION_SERVER","PHASE_TEST","PRERENDER_MANIFEST","REACT_LOADABLE_MANIFEST","ROUTES_MANIFEST","RSC_MODULE_TYPES","SERVER_DIRECTORY","SERVER_FILES_MANIFEST","SERVER_PROPS_ID","SERVER_REFERENCE_MANIFEST","STATIC_PROPS_ID","STATIC_STATUS_PAGES","STRING_LITERAL_DROP_BUNDLE","SUBRESOURCE_INTEGRITY_MANIFEST","SYSTEM_ENTRYPOINTS","TRACE_OUTPUT_VERSION","TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST","TURBO_TRACE_DEFAULT_MEMORY_LIMIT","UNDERSCORE_NOT_FOUND_ROUTE","UNDERSCORE_NOT_FOUND_ROUTE_ENTRY","WEBPACK_STATS","client","server","edgeServer","Symbol","name","xAvgCharWidth","azAvgWidth","unitsPerEm","Set"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3426, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/next@15.4.1_@babel+core@7.28.0_@opentelemetry+api@1.9.0_@playwright+test@1.54.1_react-dom@19.1.0_react@19.1.0/node_modules/next/constants.js"],"sourcesContent":["module.exports = require('./dist/shared/lib/constants')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0]}}]
}