# Production Docker Compose configuration for CodeCave
# Uses managed database and production-optimized settings

services:
  # Meilisearch - Search engine
  search:
    image: getmeili/meilisearch:v1.10
    container_name: codecave-search-prod
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      MEILI_ENV: production
      MEILI_HTTP_ADDR: 0.0.0.0:7700
    ports:
      - "7700:7700"
    volumes:
      - /mnt/volume_nyc3_01/meilisearch:/meili_data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ - Message queue
  mq:
    image: rabbitmq:3-management-alpine
    container_name: codecave-mq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: codecave
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - /mnt/volume_nyc3_01/rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Redis - Caching and sessions
  redis:
    image: redis:7-alpine
    container_name: codecave-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - /mnt/volume_nyc3_01/redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API Gateway
  kong-migrations:
    image: kong:latest
    container_name: codecave-kong-migrations-prod
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml:ro
    command: kong migrations bootstrap
    restart: "no"

  gateway:
    image: kong:latest
    container_name: codecave-gateway-prod
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_SSL_CERT: /etc/kong/ssl/fullchain.pem
      KONG_SSL_CERT_KEY: /etc/kong/ssl/privkey.pem
    ports:
      - "80:8000" # HTTP on standard port 80
      - "443:8443" # HTTPS on standard port 443
      - "8001:8001" # Keep admin on 8001
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml:ro
      - /etc/letsencrypt:/etc/letsencrypt # SSL certificates (read/write for ACME)
      - /mnt/volume_nyc3_01/kong-ssl:/etc/kong/ssl # Kong SSL storage
    depends_on:
      - kong-migrations
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS API - Main application
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.prod
    container_name: codecave-api-prod
    environment:
      NODE_ENV: production
      PORT: 3001

      # Database configuration
      DATABASE_URL: ${DATABASE_URL}

      # Supabase configuration
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_JWT_SECRET: ${SUPABASE_JWT_SECRET}

      # JWT secrets for your app tokens
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}

      # Internal service URLs (Docker network)
      MEILI_HOST: http://search:7700
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@mq:5672/codecave
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379

      # Frontend URL for CORS
      FRONTEND_URL: ${FRONTEND_URL}

    ports:
      - "3001:3001"
    volumes:
      - /mnt/volume_nyc3_01/app-logs:/app/logs
    depends_on:
      search:
        condition: service_healthy
      mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SSL termination will be handled by Let's Encrypt directly on the droplet
  # Nginx removed since frontend is served by Vercel

volumes:
  meilisearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/meilisearch

  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/rabbitmq

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/redis

networks:
  default:
    name: codecave-prod-network
