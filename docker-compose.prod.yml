# Production Docker Compose configuration for CodeCave with Doppler Integration
# Uses managed database, Doppler for secrets, and production-optimized settings

# Dynamic environment injection from Doppler
# Run with: doppler run -- docker-compose -f docker-compose.prod.yml up -d

services:
  # Meilisearch - Search engine
  search:
    image: getmeili/meilisearch:v1.10
    container_name: codecave-search-prod
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      MEILI_ENV: production
      MEILI_HTTP_ADDR: 0.0.0.0:7700
    ports:
      - "7700:7700"
    volumes:
      - /mnt/volume_nyc3_01/meilisearch:/meili_data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ - Message queue
  mq:
    image: rabbitmq:3-management-alpine
    container_name: codecave-mq-prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: codecave
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - /mnt/volume_nyc3_01/rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Redis - Caching and sessions
  redis:
    image: redis:7-alpine
    container_name: codecave-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - /mnt/volume_nyc3_01/redis:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong API Gateway
  kong-migrations:
    image: kong:latest
    container_name: codecave-kong-migrations-prod
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml:ro
    command: kong migrations bootstrap
    restart: "no"

  gateway:
    image: kong:latest
    container_name: codecave-gateway-prod
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /opt/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      # SSL configuration using Let's Encrypt certificates
      KONG_SSL_CERT: /etc/letsencrypt/live/api.codecave.tech/fullchain.pem
      KONG_SSL_CERT_KEY: /etc/letsencrypt/live/api.codecave.tech/privkey.pem
    ports:
      - "80:8000" # HTTP on standard port 80
      - "443:8443" # HTTPS on standard port 443
      - "8001:8001" # Keep admin on 8001
    volumes:
      - ./kong/kong.yml:/opt/kong/kong.yml:ro
      # SSL certificate volumes - mount entire letsencrypt directory for symlinks
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - kong-migrations
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NestJS API - Main application with production optimizations
  api:
    image: codecave-api:latest
    container_name: codecave-api-prod
    environment:
      # Core application configuration
      NODE_ENV: production
      PORT: 3001

      # Database configuration (from Doppler)
      DATABASE_URL: ${DATABASE_URL}

      # Better Auth configuration (replaces Supabase)
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}

      # OAuth Provider Credentials
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # JWT secrets for app tokens
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}

      # Internal service URLs (Docker network)
      MEILI_HOST: http://search:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY}
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@mq:5672/codecave
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # Frontend URL for CORS and redirects
      FRONTEND_URL: ${FRONTEND_URL}

      # Digital Ocean Spaces (File Storage)
      DO_SPACES_KEY: ${DO_SPACES_KEY}
      DO_SPACES_SECRET: ${DO_SPACES_SECRET}
      DO_SPACES_BUCKET: ${DO_SPACES_BUCKET}
      DO_SPACES_REGION: ${DO_SPACES_REGION}

      # Monitoring and analytics
      SENTRY_DSN: ${SENTRY_DSN_API}
      SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}
      SENTRY_ORG: ${SENTRY_ORG}
      SENTRY_PROJECT: ${SENTRY_PROJECT}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY}
      NEW_RELIC_APP_NAME: "CodeCave API"
      NEW_RELIC_LOG_LEVEL: "info"

      # External services
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

    ports:
      - "3001:3001"
    volumes:
      - /mnt/volume_nyc3_01/app-logs:/app/logs
    depends_on:
      search:
        condition: service_healthy
      mq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"
    # Enhanced health checks with multiple endpoints
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:3001/health/ready",
          "||",
          "exit",
          "1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Production security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:size=100M

  # SSL termination will be handled by Let's Encrypt directly on the droplet
  # Nginx removed since frontend is served by Vercel

  # New Relic Infrastructure Agent
  newrelic-agent:
    container_name: newrelic-infra
    build:
      context: infra/newrelic
      dockerfile: newrelic-infra.dockerfile
    cap_add:
      - SYS_PTRACE
    pid: host
    privileged: true
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
    networks:
      - default

volumes:
  meilisearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/meilisearch

  rabbitmq_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/rabbitmq

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /mnt/volume_nyc3_01/redis

networks:
  default:
    name: codecave-prod-network
